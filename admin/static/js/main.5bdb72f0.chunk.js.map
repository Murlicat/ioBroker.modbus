{"version":3,"sources":["Components/Utils.js","Tabs/Options.js","Components/TsvDialog.js","Components/DeleteAllDialog.js","Components/DeleteDialog.js","Components/RegisterTable.js","Tabs/BaseRegisters.js","Tabs/InputRegisters.js","Tabs/HoldingRegisters.js","Tabs/DiscreteInputs.js","Tabs/Coils.js","App.js","serviceWorker.js","index.js"],"names":["_rmap","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","_dmap","offsets","coils","disInputs","inputRegs","holdingRegs","Utils","address2alias","regType","address","parseInt","alias2address","alias","nonDirect2direct","Math","floor","direct2nonDirect","Options","props","inputDisabled","input","name","native","params","type","showAliases","slave","onlyUseWriteMultipleRegisters","doNotUseWriteMultipleRegisters","inputDisplay","includes","changeParam","value","JSON","parse","stringify","multiDeviceId","readIPs","readPorts","forEach","nativeParam","item","_address","directAddresses","changeNative","state","ports","customPort","ips","this","socket","getState","adapterName","instance","then","val","sendTo","list","error","console","length","path","warn","map","title","manufacturer","comName","find","setState","catch","e","getIpAddresses","common","host","ip","unshift","inputs","Paper","className","classes","optionsContainer","Typography","variant","gutterBottom","header","I18n","t","FormControl","optionContainer","FormControlLabel","label","control","Checkbox","optionsCheckbox","disabled","checked","onChange","target","help","FormHelperText","helperText","dimension","Box","InputLabel","Select","optionsSelect","options","option","MenuItem","TextField","optionsTextfield","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","tab","Grid","container","spacing","xs","md","optionsGrid","getInputsBlock","connectionInputs","generalInputs","Component","withStyles","theme","width","display","alignItems","paddingTop","paddingBottom","marginTop","marginLeft","marginBottom","padding","textAlign","fontSize","tsvEditor","height","tsvEditorTextarea","fontFamily","useState","tsv","setTsv","useEffect","tsvResult","push","fields","field","data","undefined","toString","json2tsv","open","enqueueSnackbar","useSnackbar","Dialog","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","DialogContentText","showPrintMargin","setOptions","firstLineNumber","mode","DialogActions","Button","color","copyToClipboard","startIcon","tsv2json","shift","success","errors","index","itemValues","itemIndex","save","DeleteAllDialog","action","DeleteDialog","disableWarnings","setDisableWarnings","DataCell","result","sortedItem","editMode","setEditMode","ref","useRef","Tooltip","inputRef","tableCheckbox","getDisable","$index","rooms","allowNone","dense","inputProps","tableSelect","tableSelectContainer","tableTextFieldContainer","tableTextField","TableCell","clsx","tableCell","nonEditMode","window","localStorage","setItem","setTimeout","current","focus","tableHeader","whiteSpace","fontWeight","tableHeaderExtended","palette","primary","light","dark","tableContainer","overflow","maxHeight","cursor","tsvDialogOpen","setTsvDialogOpen","getItem","extendedMode","setExtendedMode","deleteAllDialog","setDeleteAllDialog","deleteDialog","setDeleteDialog","sortedData","getSortedData","orderBy","order","addItem","Switch","showExtendedModeSwitch","Table","size","stickyHeader","TableHead","TableRow","filter","expert","formulaDisabled","isChecked","indeterminate","trueFound","falseFound","k","style","tooltip","newData","changeData","sorted","TableSortLabel","active","direction","isAsc","onChangeOrder","TableBody","hover","lastTime","sessionStorage","Date","deleteItem","disableDialogs","toISOString","BaseRegisters","nativeField","addressToCanonical","newItem","getFields","splice","sort","sortedItem1","sortedItem2","sort1","sort2","deviceId","isShowExtendedModeSwitch","InputRegisters","lastItem","len","factor","offset","formula","role","cw","isScale","types","roles","propTypes","PropTypes","object","isRequired","number","string","onError","func","onLoad","changed","bool","HoldingRegisters","poll","wp","DiscreteInputs","Coils","tabs","component","TabOptions","TabDiscreteInputs","icon","marginRight","TabCoils","TabInputRegisters","TabHoldingRegisters","App","io","location","port","log","SocketClient","extendedProps","encryptedFields","translations","require","moreLoaded","getEnums","selectedTab","findIndex","loaded","background","default","text","AppBar","Tabs","getSelectedTab","selectTab","scrollButtons","Tab","data-name","isIFrame","tabContentIFrame","tabContent","TabComponent","errorText","onLoadConfig","attr","cb","updateNativeValue","getIsChanged","renderError","renderSaveCloseButtons","themeType","GenericApp","root","minHeight","Boolean","hostname","match","themeName","getThemeName","version","build","ReactDOM","render","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5bdb72f0.chunk.js","sourcesContent":["const _rmap = {\n    0: 15,\n    1: 14,\n    2: 13,\n    3: 12,\n    4: 11,\n    5: 10,\n    6: 9,\n    7: 8,\n    8: 7,\n    9: 6,\n    10: 5,\n    11: 4,\n    12: 3,\n    13: 2,\n    14: 1,\n    15: 0\n};\nconst _dmap = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    10: 10,\n    11: 11,\n    12: 12,\n    13: 13,\n    14: 14,\n    15: 15\n};\n\nconst offsets = {\n    coils: 1,\n    disInputs: 10001,\n    inputRegs: 30001,\n    holdingRegs: 40001,\n};\n\nfunction address2alias(regType, address) {\n    return parseInt(address, 10) + offsets[regType];\n}\n\nfunction alias2address(regType, alias) {\n    return parseInt(alias, 10) - offsets[regType];\n}\n\nfunction nonDirect2direct(regType, address) {\n    if (regType === 'disInputs' || regType === 'coils') {\n        address = parseInt(address, 10) || 0;\n        address = Math.floor(address / 16) * 16 + _dmap[address % 16];\n    }\n\n    return address;\n}\n\nfunction direct2nonDirect(regType, address) {\n    if (regType === 'disInputs' || regType === 'coils') {\n        address = parseInt(address, 10) || 0;\n        address = Math.floor(address / 16) * 16 + _rmap[address % 16];\n        return address;\n    } else {\n        return address;\n    }\n}\n\nconst Utils = {\n    address2alias,\n    alias2address,\n    nonDirect2direct,\n    direct2nonDirect\n};\n\nexport default Utils;","import {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\n\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport Utils from '../Components/Utils';\n\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport connectionInputs from '../data/optionsConnection';\nimport generalInputs from '../data/optionsGeneral';\n\nconst styles = theme => ({\n    optionsSelect: {\n        width: 280\n    },\n    optionsTextfield: {\n        width: 280\n    },\n    optionContainer: {\n        display: 'flex',\n        alignItems: 'start',\n        paddingTop: 4,\n        paddingBottom: 4\n    },\n    helperText: {\n        marginTop: -8,\n        marginLeft: 32,\n        marginBottom: 10\n    },\n    optionsContainer: {\n        width: `calc(100% - ${theme.spacing(4)}px)`,\n        padding: theme.spacing(2),\n        display: 'inline-block',\n        textAlign: 'left'\n    },\n    optionsGrid: {\n        textAlign: 'center',\n        padding: theme.spacing(2),\n    },\n    header: {\n        fontSize: 24,\n    }\n});\n\nclass Options extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ports: null,\n            customPort: false,\n            ips: null,\n        };\n    }\n\n    readPorts() {\n        return this.props.socket.getState(`system.adapter.${this.props.adapterName}.${this.props.instance}.alive`)\n            .then(state => {\n                if (state && state.val) {\n                    return this.props.socket.sendTo(this.props.adapterName + '.' + this.props.instance, 'listUart', null)\n                        .then(list => {\n                            if (list && list.error) {\n                                console.error('Cannot read ports: ' + list.error);\n                            } else\n                            if (list && list.length === 1 && list[0] && list[0].path === 'Not available') {\n                                console.warn('Cannot read ports');\n                            } else {\n                                const ports = list.map(item => ({value: item.path, title: item.path + (item.manufacturer ? ' [' + item.manufacturer + ']' : '')}));\n                                const customPort = this.props.native.params.comName && !ports.find(item => item.value === this.props.native.params.comName);\n\n                                this.setState({ports, customPort});\n                            }\n                        })\n                        .catch(e => console.error('Cannot read ports: ' + e));\n                }\n            })\n            .catch(e => console.error('Cannot read alive: ' + e));\n    }\n\n    readIPs() {\n        return this.props.socket.getIpAddresses(this.props.common.host)\n            .then(ips => {\n                ips = ips || [];\n                ips = ips.map(ip => ({value: ip, title: ip}));\n                ips.unshift({value: '0.0.0.0', title: 'Listen on all IPs'});\n                ips.unshift({value: '127.0.0.1', title: '127.0.0.1 (Localhost)'});\n                this.setState({ips});\n            })\n            .catch(e => console.error('Cannot read IP addresses: ' + e));\n    }\n\n    componentDidMount() {\n        if (this.props.native.params.type === 'serial') {\n            this.readPorts();\n        }\n        if (this.props.native.params.type !== 'serial' && (this.props.native.params.slave === '1' || this.props.native.params.slave === 1)) {\n            this.readIPs();\n        }\n    }\n\n    inputDisabled = input => {\n        if (input.name === 'slave' && this.props.native.params.type !== 'tcp') {\n            return true;\n        } else\n        if (input.name === 'directAddresses' && !this.props.native.params.showAliases) {\n            return true;\n        } else\n        if (input.name === 'multiDeviceId' && (this.props.native.params.slave === '1' || this.props.native.params.slave === 1)) {\n            return true;\n        } else\n        if (input.name === 'doNotUseWriteMultipleRegisters' && this.props.native.params.onlyUseWriteMultipleRegisters) {\n            return true;\n        } else\n        if (input.name === 'onlyUseWriteMultipleRegisters' && this.props.native.params.doNotUseWriteMultipleRegisters) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    inputDisplay = input => {\n        if (['tcp', 'tcprtu'].includes(this.props.native.params.type)) {\n            if (['comName', 'baudRate', 'dataBits', 'stopBits', 'parity'].includes(input.name)) {\n                return false;\n            }\n        } else {\n            if (['bind', 'port'].includes(input.name)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    getInputsBlock(inputs, title) {\n        return <><Paper className={this.props.classes.optionsContainer}>\n            <Typography variant=\"h4\" gutterBottom className={this.props.classes.header}>{I18n.t(title)}</Typography>\n            {inputs.map(input => {\n                if (!this.inputDisplay(input)) {\n                    return null;\n                } else if (input.name === 'bind' && this.props.native.params.type !== 'serial' && (this.props.native.params.slave === '1' || this.props.native.params.slave === 1)) {\n                    return <Box className={this.props.classes.optionContainer} key={input.name}>\n                        {this.state.ips ?\n                            <FormControl>\n                                <InputLabel>{I18n.t('Slave IP address')}</InputLabel>\n                                <Select\n                                    className={this.props.classes.optionsSelect}\n                                    disabled={this.inputDisabled(input)}\n                                    value={this.props.native.params[input.name] || ''}\n                                    onChange={e => this.changeParam(input.name, e.target.value)}\n                                >\n                                    {this.state.ips.map(option =>\n                                        <MenuItem key={option.value} value={option.value}>{option.title}</MenuItem>\n                                    )}\n                                </Select>\n                            </FormControl>\n                            :\n                            <TextField\n                                type={input.type}\n                                label={I18n.t('Slave IP address')}\n                                className={this.props.classes.optionsTextfield}\n                                disabled={this.inputDisabled(input)}\n                                helperText={input.help ? I18n.t(input.help) : ''}\n                                value={this.props.native.params[input.name]}\n                                InputProps={{endAdornment: input.dimension ? <InputAdornment position=\"end\">{I18n.t(input.dimension)}</InputAdornment> : null}}\n                                onChange={e => this.changeParam(input.name, e.target.value)}\n                            />}\n                    </Box>;\n                }\n                if (input.type === 'checkbox') {\n                    return <FormControl className={this.props.classes.optionContainer} key={input.name}>\n                        <FormControlLabel\n                            label={I18n.t(input.title)}\n                            control={<Checkbox\n                                label={I18n.t(input.title)}\n                                className={this.props.classes.optionsCheckbox}\n                                disabled={this.inputDisabled(input)}\n                                checked={this.props.native.params[input.name]}\n                                onChange={e => this.changeParam(input.name, e.target.checked)}\n                            />}\n                        />\n                        {input.help ? <FormHelperText className={this.props.classes.helperText}>{I18n.t(input.help)}</FormHelperText> : null}\n                        {input.dimension ? I18n.t(input.dimension) : null}\n                    </FormControl>;\n                } else if (input.type === 'select') {\n                    return <Box className={this.props.classes.optionContainer} key={input.name}>\n                        <FormControl>\n                            <InputLabel>{I18n.t(input.title)}</InputLabel>\n                            <Select\n                                className={this.props.classes.optionsSelect}\n                                disabled={this.inputDisabled(input)}\n                                value={this.props.native.params[input.name] || ''}\n                                onChange={e => this.changeParam(input.name, e.target.value)}\n                            >\n                                {input.options.map(option =>\n                                    <MenuItem key={option.value} value={option.value}>{option.title}</MenuItem>\n                                )}\n                            </Select>\n                        </FormControl> {input.dimension ? I18n.t(input.dimension) : null}\n                    </Box>;\n                }  else if (input.type === 'ports') {\n                    return <Box className={this.props.classes.optionContainer} key={input.name}>\n                        {this.state.ports && !this.state.customPort ?\n                            <FormControl>\n                                <InputLabel>{I18n.t(input.title)}</InputLabel>\n                                <Select\n                                    className={this.props.classes.optionsSelect}\n                                    disabled={this.inputDisabled(input)}\n                                    value={this.props.native.params[input.name] || ''}\n                                    onChange={e => this.changeParam(input.name, e.target.value)}\n                                >\n                                    {this.state.ports.map(option =>\n                                        <MenuItem key={option.value} value={option.value}>{option.title}</MenuItem>\n                                    )}\n                                </Select>\n                            </FormControl>\n                            :\n                            <TextField\n                                type={input.type}\n                                label={I18n.t(input.title)}\n                                className={this.props.classes.optionsTextfield}\n                                disabled={this.inputDisabled(input)}\n                                helperText={input.help ? I18n.t(input.help) : ''}\n                                value={this.props.native.params[input.name]}\n                                InputProps={{endAdornment: input.dimension ? <InputAdornment position=\"end\">{I18n.t(input.dimension)}</InputAdornment> : null}}\n                                onChange={e => this.changeParam(input.name, e.target.value)}\n                            />}\n                            {this.state.ports ? <IconButton onClick={() => this.setState({customPort: !this.state.customPort})}><EditIcon/></IconButton> : null}\n                    </Box>;\n                } else {\n                    return <Box className={this.props.classes.optionContainer} key={input.name}>\n                        <TextField\n                            type={input.type}\n                            label={I18n.t(input.title)}\n                            className={this.props.classes.optionsTextfield}\n                            disabled={this.inputDisabled(input)}\n                            helperText={input.help ? I18n.t(input.help) : ''}\n                            value={this.props.native.params[input.name]}\n                            InputProps={{endAdornment: input.dimension ? <InputAdornment position=\"end\">{I18n.t(input.dimension)}</InputAdornment> : null}}\n                            onChange={e => this.changeParam(input.name, e.target.value)}\n                        />\n                    </Box>;\n                }\n            })\n            }\n        </Paper></>\n    }\n\n    render() {\n        return <form className={ this.props.classes.tab }>\n            <Grid container spacing={2} >\n                <Grid item xs={12} md={6} className={ this.props.classes.optionsGrid }>{this.getInputsBlock(connectionInputs, 'Connection parameters')}</Grid>\n                <Grid item xs={12} md={6} className={ this.props.classes.optionsGrid }>{this.getInputsBlock(generalInputs, 'General')}</Grid>\n            </Grid>\n        </form>;\n    }\n\n    changeParam = (name, value) => {\n        let native = JSON.parse(JSON.stringify(this.props.native));\n        native.params[name] = value;\n        if (name === 'slave') {\n            if (value === '1' || value === 1) {\n                native.params.multiDeviceId = false;\n                if (this.props.native.params.type !== 'serial') {\n                    this.readIPs();\n                }\n            }\n        } else\n        if (name === 'type') {\n            if (value !== 'tcp' && (native.params.slave === 1 || native.params.slave === '1')) {\n                native.params.slave = '0';\n            }\n\n            if (value === 'serial') {\n                this.readPorts();\n            }\n            if (value === 'serial' && (this.props.native.params.slave === '1' || this.props.native.params.slave === 1)) {\n                this.readIPs();\n            }\n        } else\n        if (name === 'showAliases') {\n            ['disInputs', 'inputRegs', 'holdingRegs', 'coils'].forEach(nativeParam => {\n                native[nativeParam].forEach(item => {\n                    if (value) {\n                        item._address = Utils.address2alias(nativeParam, item._address);\n                        if (native.params.directAddresses) {\n                            item._address = Utils.nonDirect2direct(nativeParam, item._address);\n                        }\n                    } else {\n                        if (native.params.directAddresses) {\n                            item._address = Utils.direct2nonDirect(nativeParam, item._address);\n                        }\n                        item._address = Utils.alias2address(nativeParam, item._address);\n                    }\n                });\n            });\n        } else\n        if (name === 'directAddresses' && native.params.showAliases) {\n            ['disInputs', 'coils'].forEach(nativeParam => {\n                native[nativeParam].forEach(item => {\n                    if (value) {\n                        item._address = Utils.nonDirect2direct(nativeParam, item._address);\n                    } else {\n                        item._address = Utils.direct2nonDirect(nativeParam, item._address);\n                    }\n                });\n            });\n        }\n        this.props.changeNative(native);\n    }\n}\n\nOptions.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n    rooms: PropTypes.object,\n};\n\nexport default withStyles(styles)(Options);\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\n\nimport { tsv2json, json2tsv } from 'tsv-json';\nimport { useSnackbar } from 'notistack';\nimport AceEditor from 'react-ace';\n\nimport I18n from '@iobroker/adapter-react/i18n';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nimport ClearIcon from '@material-ui/icons/Clear';\nimport SaveIcon from '@material-ui/icons/Save';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\n\nconst styles = theme => ({\n    tsvEditor: {\n        width: '100%',\n        height: 400\n    },\n    tsvEditorTextarea: {\n        fontFamily: 'monospace'\n    }\n});\n\nconst TsvDialog = (props) => {\n    const [tsv, setTsv] = useState('');\n    useEffect(() => {\n        let tsvResult = [];\n        tsvResult.push(props.fields.map(field => field.name));\n        props.data.forEach(item =>\n            tsvResult.push(props.fields.map(field => item[field.name] !== undefined ? item[field.name].toString() : ''))\n        );\n        setTsv(json2tsv(tsvResult));\n    }, [props.open]); // eslint-disable-line react-hooks/exhaustive-deps\n    const { enqueueSnackbar } = useSnackbar();\n\n    if (!props.open) {\n        return null;\n    }\n\n    const saveTsv = () => {\n        let data = tsv2json(tsv);\n        let fields = data.shift();\n        let success = true;\n        let errors = [];\n        for (let index in props.fields) {\n            if (props.fields[index].name !== fields[index]) {\n                errors.push(<>No field <i>{props.fields[index].name}</i> in position <i>{parseInt(index) + 1}</i>!</>);\n                success = false;\n            }\n        }\n\n        data = data.map((itemValues, itemIndex) => {\n            let item = {};\n            for (let index in props.fields) {\n                if (props.fields[index].type === 'select' && !props.fields[index].options.map(option => option.value).includes(itemValues[index])) {\n                    errors.push(<>Value <i>{itemValues[index]}</i> is wrong for field <i>{props.fields[index].name}</i> in position <i>{parseInt(itemIndex) + 1}</i>!</>);\n                    success = false;\n                }\n                if (props.fields[index].type === 'checkbox') {\n                    itemValues[index] = itemValues[index] === 'true' ? true : false;\n                }\n                item[props.fields[index].name] = itemValues[index];\n            }\n            return item;\n        });\n\n        if (!success) {\n            enqueueSnackbar(<div>{errors.map((error, index) => <div key={index}>{error}</div>)}</div>, { variant: 'error' });\n            return;\n        }\n        props.save(data);\n        props.onClose();\n    };\n\n    return <Dialog\n        open={props.open}\n        onClose={props.onClose}\n        maxWidth=\"lg\"\n        fullWidth\n    >\n        <DialogTitle>{I18n.t('Edit data as TSV')}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>{I18n.t('You can copy, paste and edit data as TSV.')}</DialogContentText>\n            <div>\n                <AceEditor\n                    onChange={e => setTsv(e)}\n                    height=\"400px\"\n                    showPrintMargin={false}\n                    value={tsv}\n                    className={props.classes.tsvEditor}\n                    width=\"100%\"\n                    setOptions={{firstLineNumber: 0}}\n                    mode={null}\n                />\n            </div>\n        </DialogContent>\n        <DialogActions>\n            <Button variant=\"outlined\" color=\"primary\" onClick={e => {\n                Utils.copyToClipboard(tsv, e);\n                enqueueSnackbar(I18n.t('TSV was copied to clipboard'));\n            }} startIcon={<FileCopyIcon />}>{I18n.t('Copy to clipboard')}</Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={saveTsv} startIcon={<SaveIcon />}>{I18n.t('Import')}</Button>\n            <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Close')}</Button>\n        </DialogActions>\n    </Dialog>\n}\n\nTsvDialog.propTypes = {\n    open: PropTypes.bool,\n    onClose: PropTypes.func,\n    classes: PropTypes.object,\n    save: PropTypes.func,\n    fields: PropTypes.array,\n    data: PropTypes.array\n}\n\nexport default withStyles(styles)(TsvDialog);","import PropTypes from 'prop-types';\n\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nconst DeleteAllDialog = (props) => {\n    return props.open ? <Dialog open={props.open} onClose={props.onClose}>\n        <DialogTitle>{I18n.t('Delete all items')}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>{I18n.t('Are you sure to delete all items?')}</DialogContentText>\n            <DialogActions>\n                <Button variant=\"contained\" color=\"secondary\" startIcon={<DeleteIcon />} onClick={() => {\n                    props.action();\n                    props.onClose();\n                }}>{I18n.t('Delete all items')}</Button>\n                <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Cancel')}</Button>\n            </DialogActions>\n        </DialogContent>\n    </Dialog> : null;\n}\n\nDeleteAllDialog.propTypes = {\n    open: PropTypes.bool,\n    action: PropTypes.func,\n    onClose: PropTypes.func,\n    classes: PropTypes.object,\n}\n\nexport default DeleteAllDialog;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nconst DeleteDialog = (props) => {\n    const [disableWarnings, setDisableWarnings] = useState(false);\n    useEffect(() => {\n        setDisableWarnings(false);\n    }, [props.open]);\n\n    return props.open ? <Dialog open={props.open} onClose={props.onClose}>\n        <DialogTitle>{I18n.t('Delete item')}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>{I18n.t('Are you sure to delete item with address \"%s\"?', props.item._address)}</DialogContentText>\n            <DialogContentText><FormControlLabel\n                label={I18n.t('Don\\'t show this message in 5 minutes')}\n                control={<Checkbox\n                    checked={disableWarnings}\n                    onChange={e => setDisableWarnings(e.target.checked)}\n            />}/></DialogContentText>\n            <DialogActions>\n                <Button variant=\"contained\" color=\"secondary\" startIcon={<DeleteIcon />} onClick={() => {\n                    props.action(disableWarnings);\n                    props.onClose();\n                }}>{I18n.t('Delete')}</Button>\n                <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Cancel')}</Button>\n            </DialogActions>\n        </DialogContent>\n    </Dialog> : null;\n}\n\nDeleteDialog.propTypes = {\n    open: PropTypes.bool,\n    onClose: PropTypes.func,\n    classes: PropTypes.object,\n    action: PropTypes.func,\n    item: PropTypes.object,\n}\n\nexport default DeleteDialog;","import { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\n\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport ImportExport from '@material-ui/icons/ImportExport';\n\nimport I18n from '@iobroker/adapter-react/i18n';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nimport ExpertIcon from '@iobroker/adapter-react/icons/IconExpert';\nimport TextWithIcon from '@iobroker/adapter-react/Components/TextWithIcon';\nimport SelectWithIcon from '@iobroker/adapter-react/Components/SelectWithIcon';\n\nimport TsvDialog from './TsvDialog';\nimport DeleteAllDialog from './DeleteAllDialog';\nimport DeleteDialog from './DeleteDialog';\n\nconst styles = theme => ({\n    tableHeader: {\n        whiteSpace: 'nowrap',\n        fontWeight: 'bold',\n        fontSize: '80%',\n        padding: '0px 8px'\n    },\n    tableHeaderExtended: {\n        color: theme.palette.type === 'dark' ? theme.palette.primary.light : theme.palette.primary.dark\n    },\n    tableCell: {\n        whiteSpace: 'nowrap',\n        fontSize: '80%',\n        padding: '0px 8px'\n    },\n    tableContainer: {\n        overflow: 'auto',\n        maxHeight: 'calc(100vh - 180px)'\n    },\n    tableTextField: {\n        fontSize: '80%'\n    },\n    tableSelect: {\n        fontSize: '80%'\n    },\n    tableTextFieldContainer: {\n        width: '100%'\n    },\n    tableSelectContainer: {\n        width: '100%'\n    },\n    nonEditMode: {\n        cursor: 'pointer'\n    }\n});\n\nconst DataCell = props => {\n    const sortedItem = props.sortedItem;\n    const field = props.field;\n    const editMode = props.editMode;\n    const setEditMode = props.setEditMode;\n\n    const ref = useRef();\n\n    let item = sortedItem.item;\n    let result;\n    if (field.type === 'checkbox') {\n        if (!editMode) {\n            result = <Checkbox\n                checked={!!item[field.name]}\n                disabled\n            />;\n        } else {\n            result = <Tooltip title={I18n.t(field.title)}>\n                <Checkbox\n                    inputRef={ref}\n                    className={props.classes.tableCheckbox}\n                    checked={!!item[field.name]}\n                    disabled={props.getDisable(sortedItem.$index, field.name)}\n                    onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.checked)}\n                />\n            </Tooltip>;\n        }\n    } else if (field.type === 'rooms') {\n        if (!editMode) {\n            result = <TextWithIcon list={props.rooms} value={item[field.name]}/>;\n        } else {\n            result = <SelectWithIcon\n                list={props.rooms}\n                allowNone={true}\n                value={item[field.name] === undefined || item[field.name] === null ? '' : item[field.name]}\n                dense={true}\n                inputProps={{ref, className: props.classes.tableSelect}}\n                disabled={props.getDisable(sortedItem.$index, field.name)}\n                onChange={value => props.changeParam(sortedItem.$index, field.name, value)}\n                className={props.classes.tableSelectContainer}\n            />;\n        }\n    } else if (field.type === 'select') {\n        if (!editMode) {\n            let option = field.options.find(option => option.value === item[field.name]);\n            result = option ? option.title : '';\n        } else {\n            result = <Select\n                value={item[field.name] === undefined || item[field.name] === null ? '' : item[field.name]}\n                inputProps={{ref, className: props.classes.tableSelect}}\n                disabled={props.getDisable(sortedItem.$index, field.name)}\n                onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.value)}\n                className={props.classes.tableSelectContainer}\n            >\n                {field.options.map(option =>\n                    <MenuItem key={option.value} value={option.value}>{option.title ? option.title : <i>{I18n.t('Nothing')}</i>}</MenuItem>\n                )}\n            </Select>;\n        }\n    } else {\n        if (!editMode) {\n            result = item[field.name] ? item[field.name] : null;\n        } else {\n            result = <TextField\n                value={item[field.name] === undefined || item[field.name] === null ? '' : item[field.name]}\n                className={props.classes.tableTextFieldContainer}\n                inputProps={{ref: ref, className: props.classes.tableTextField}}\n                type={field.type}\n                onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.value)}\n                disabled={props.getDisable(sortedItem.$index, field.name)}\n            />;\n        }\n    }\n\n    return <TableCell\n        className={Utils.clsx(props.classes.tableCell, !editMode && props.classes.nonEditMode)}\n        onClick={e => {\n            setEditMode(true);\n            window.localStorage.setItem('Modbus.editMode', 'true');\n            window.setTimeout(() => ref.current && ref.current.focus(), 100);\n        }}\n    >\n        {result}\n    </TableCell>;\n}\n\nconst RegisterTable = props => {\n    const [tsvDialogOpen, setTsvDialogOpen] = useState(false);\n    const [editMode, setEditMode] = useState(window.localStorage.getItem('Modbus.editMode') !== 'false');\n    const [extendedMode, setExtendedMode] = useState(window.localStorage.getItem('Modbus.extendedMode') === 'true');\n    const [deleteAllDialog, setDeleteAllDialog] = useState({\n        open: false,\n        action: null,\n    });\n    const [deleteDialog, setDeleteDialog] = useState({\n        open: false,\n        item: null,\n        action: null,\n    });\n\n    let sortedData = props.getSortedData(props.data, props.orderBy, props.order);\n\n    return <div>\n        <div>\n            <Tooltip title={I18n.t('Add line')}>\n                <IconButton onClick={e => props.addItem()}>\n                    <AddIcon/>\n                </IconButton>\n            </Tooltip>\n            <Tooltip title={I18n.t('Edit as TSV (Tab separated values)')}>\n                <IconButton onClick={() => setTsvDialogOpen(true)}>\n                    <ImportExport/>\n                </IconButton>\n            </Tooltip>\n            <FormControlLabel\n                control={<Switch checked={editMode} onChange={e => {\n                    setEditMode(e.target.checked);\n                    window.localStorage.setItem('Modbus.editMode', e.target.checked);\n                }}/>}\n                label={I18n.t('Edit mode')}\n            />\n            {props.showExtendedModeSwitch && <Tooltip title={I18n.t('Toggle extended mode')}>\n                <IconButton\n                    color={extendedMode ? 'primary' : 'inherit'}\n                    onClick={() => {\n                        window.localStorage.setItem('Modbus.extendedMode', extendedMode ? 'false' : 'true');\n                        setExtendedMode(!extendedMode);\n                    }}>\n                    <ExpertIcon/>\n                </IconButton>\n            </Tooltip>}\n        </div>\n        <div className={props.classes.tableContainer}>\n            <Table size=\"small\"\n                   stickyHeader\n                   padding=\"none\"\n            >\n                <TableHead>\n                    <TableRow>\n                        {props.fields.filter(item => (extendedMode || !item.expert) && (!props.formulaDisabled || !item.formulaDisabled)).map(field => {\n                            let isChecked = false;\n                            let indeterminate = false;\n                            let trueFound = false;\n                            let falseFound = false;\n                            for (let k in props.data) {\n                                if (props.data[k][field.name]) {\n                                    isChecked = true;\n                                    trueFound = true;\n                                } else {\n                                    isChecked = false;\n                                    falseFound = true;\n                                }\n\n                                if (trueFound && falseFound) {\n                                    indeterminate = true;\n                                    isChecked = false;\n                                    break;\n                                }\n                            }\n\n                            return <TableCell\n                                key={field.name}\n                                style={{width: field.type === 'checkbox' ? 20 : field.width}}\n                                className={Utils.clsx(props.classes.tableHeader, field.expert && props.classes.tableHeaderExtended)}\n                                title={field.tooltip ? I18n.t(field.tooltip) : null}\n                            >\n                                {field.type === 'checkbox' ?\n                                    <Tooltip title={I18n.t('Change all')}>\n                                        <Checkbox\n                                            indeterminate={indeterminate}\n                                            checked={isChecked}\n                                            onChange={e => {\n                                                let newData = JSON.parse(JSON.stringify(props.data));\n                                                newData.forEach(item =>\n                                                    item[field.name] = e.target.checked);\n                                                props.changeData(newData);\n                                            }}\n                                        />\n                                    </Tooltip>\n                                    : null}\n                                {field.sorted ? <TableSortLabel\n                                    active={field.name === props.orderBy}\n                                    direction={props.order}\n                                    onClick={e => {\n                                        const isAsc = props.orderBy === field.name && props.order === 'asc';\n                                        props.onChangeOrder(field.name, isAsc ? 'desc' : 'asc');\n                                    }}\n                                >{I18n.t(field.title)}</TableSortLabel> : I18n.t(field.title)}\n                            </TableCell>\n                        })}\n                        <TableCell>\n                            <Tooltip title={I18n.t('Delete all')}>\n                                <div>\n                                    <IconButton\n                                        size=\"small\"\n                                        onClick={e => setDeleteAllDialog({\n                                            open: true,\n                                            action: () => props.changeData([]),\n                                        })}\n                                        disabled={!props.data.length}\n                                    >\n                                        <DeleteIcon/>\n                                    </IconButton>\n                                </div>\n                            </Tooltip>\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        sortedData.map(sortedItem =>\n                            <TableRow hover key={sortedItem.$index}>\n                                {props.fields.filter(item => (extendedMode || !item.expert) && (!props.formulaDisabled || !item.formulaDisabled)).map(field =>\n                                    <DataCell\n                                        sortedItem={sortedItem}\n                                        field={field}\n                                        editMode={editMode}\n                                        rooms={props.rooms}\n                                        setEditMode={setEditMode}\n                                        key={field.name}\n                                        {...props}\n                                    />\n                                )}\n                                <TableCell>\n                                    <Tooltip title={I18n.t('Delete')}>\n                                        <div>\n                                            <IconButton size=\"small\" onClick={e => {\n                                                let lastTime = window.sessionStorage.getItem('disableDeleteDialogs');\n                                                if (lastTime && (new Date() - new Date(lastTime)) < 1000 * 60 * 5) {\n                                                    props.deleteItem(sortedItem.$index);\n                                                    return;\n                                                }\n                                                setDeleteDialog({\n                                                    open: true,\n                                                    action: disableDialogs => {\n                                                        if (disableDialogs) {\n                                                            window.sessionStorage.setItem('disableDeleteDialogs', (new Date()).toISOString());\n                                                        }\n                                                        props.deleteItem(sortedItem.$index);\n                                                    },\n                                                    item: sortedItem.item\n                                                })\n                                            }}>\n                                                <DeleteIcon/>\n                                            </IconButton>\n                                        </div>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )\n                    }\n                </TableBody>\n            </Table>\n        </div>\n        <TsvDialog\n            open={tsvDialogOpen}\n            save={props.changeData}\n            onClose={() => setTsvDialogOpen(false)}\n            data={props.data}\n            fields={props.fields}\n        />\n        <DeleteAllDialog\n            open={deleteAllDialog.open}\n            action={deleteAllDialog.action}\n            onClose={() => setDeleteAllDialog({\n                open: false,\n                action: null,\n            })}\n        />\n        <DeleteDialog\n            open={deleteDialog.open}\n            action={deleteDialog.action}\n            onClose={() => setDeleteDialog({\n                open: false,\n                action: null,\n                item: null\n            })}\n            item={deleteDialog.item}\n        />\n    </div>;\n}\n\nRegisterTable.propTypes = {\n    data: PropTypes.array,\n    fields: PropTypes.array,\n    classes: PropTypes.object,\n    addItem: PropTypes.func,\n    changeData: PropTypes.func,\n    deleteItem: PropTypes.func,\n    rooms: PropTypes.object,\n    formulaDisabled: PropTypes.bool,\n    onChangeOrder: PropTypes.func,\n    getSortedData: PropTypes.func,\n    showExtendedModeSwitch: PropTypes.bool,\n}\n\nexport default withStyles(styles)(RegisterTable);","import {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Paper from '@material-ui/core/Paper';\nimport RegisterTable from '../Components/RegisterTable';\nimport Utils from '../Components/Utils';\n\nclass BaseRegisters extends Component {\n    constructor(props) {\n        super(props);\n        this.nativeField = '';\n        this.state = {\n            order: window.localStorage.getItem('Modbus.order') || 'asc',\n            orderBy: window.localStorage.getItem('Modbus.orderBy') || '_address',\n        };\n    }\n\n    componentDidMount() {\n        if (!window.localStorage.getItem('Modbus.orderBy')) {\n            this.fields = this.fields || this.getFields();\n            const isSlaveIDPresent = !!this.fields.find(item => item.name === 'deviceId');\n            const orderBy = isSlaveIDPresent ? 'deviceId' : '_address';\n\n            if (orderBy !== this.state.orderBy) {\n                this.setState({orderBy});\n            }\n        }\n    }\n\n    isShowExtendedModeSwitch() {\n        return true;\n    }\n\n    getFields() {\n        return null;\n    }\n\n    addressToCanonical(_address) {\n        let address = _address;\n        let params = this.props.native.params;\n        if (params.showAliases) {\n            if (params.directAddresses) {\n                address = Utils.direct2nonDirect(this.nativeField, address);\n            }\n            address = Utils.alias2address(this.nativeField, address);\n        }\n        return address;\n    }\n\n    changeParam = (index, name, value) => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n        data[index][name] = value;\n        if (name === '_address') {\n            data[index]['address'] = this.addressToCanonical(value);\n        }\n        this.props.onChange(this.nativeField, data);\n    }\n\n    addItem = () => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n        let newItem = {};\n        this.getFields().forEach(field => newItem[field.name] = '');\n        data.push(newItem);\n        this.props.onChange(this.nativeField, data);\n    }\n\n    deleteItem = index => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n        data.splice(index, 1);\n        this.props.onChange(this.nativeField, data);\n    }\n\n    changeData = data => {\n        this.props.onChange(this.nativeField, data);\n    }\n\n    getDisable = (index, name) => {\n        return false;\n    }\n\n    getSortedData = (data, orderBy, order) => {\n        data = data || this.props.native[this.nativeField];\n        orderBy = orderBy || this.state.orderBy;\n        order = order || this.state.order;\n        let sortedData = [];\n        data.forEach((item, index) => {sortedData[index] = {item, $index: index}});\n        const field = this.fields.find(item => item.name === orderBy);\n\n        sortedData.sort((sortedItem1, sortedItem2) => {\n            let sort1;\n            let sort2;\n            if (orderBy === 'deviceId') {\n                sort1 = (parseInt(sortedItem1.item.deviceId, 10) << 16) | parseInt(sortedItem1.item._address, 10);\n                sort2 = (parseInt(sortedItem2.item.deviceId, 10) << 16) | parseInt(sortedItem2.item._address, 10);\n            } else if (orderBy === '$index') {\n                sort1 = sortedItem1[orderBy];\n                sort2 = sortedItem2[orderBy];\n            } else if (field && field.type === 'number') {\n                sort1 = parseInt(sortedItem1.item[orderBy], 10);\n                sort2 = parseInt(sortedItem2.item[orderBy], 10);\n            } else {\n                sort1 = sortedItem1.item[orderBy];\n                sort2 = sortedItem2.item[orderBy];\n            }\n            return (order === 'asc' ? sort1 > sort2 : sort1 < sort2) ? 1 : -1;\n        });\n\n        return sortedData;\n    }\n\n    render() {\n        this.fields = this.fields || this.getFields();\n\n        return <Paper>\n            <RegisterTable\n                fields={this.fields}\n                data={this.props.native[this.nativeField]}\n                getSortedData={this.getSortedData}\n                showExtendedModeSwitch={this.isShowExtendedModeSwitch()}\n                changeParam={this.changeParam}\n                addItem={this.addItem}\n                deleteItem={this.deleteItem}\n                changeData={this.changeData}\n                getDisable={this.getDisable}\n                formulaDisabled={this.props.formulaDisabled}\n                rooms={this.props.rooms}\n                order={this.state.order}\n                orderBy={this.state.orderBy}\n                onChangeOrder={(orderBy, order) => {\n                    this.setState({orderBy, order});\n                    window.localStorage.setItem('Modbus.orderBy', orderBy);\n                    window.localStorage.setItem('Modbus.order', order);\n                }}\n            />\n        </Paper>\n    }\n}\n\nBaseRegisters.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n    rooms: PropTypes.object,\n    formulaDisabled: PropTypes.bool,\n};\n\nexport default BaseRegisters;\n","import PropTypes from 'prop-types';\n\nimport types from '../data/types';\nimport roles from '../data/roles';\n\nimport BaseRegisters from './BaseRegisters';\n\nclass InputRegisters extends BaseRegisters {\n    nativeField = 'inputRegs';\n\n    getFields() {\n        let result = [\n            {name: '_address', title: 'Address', type: 'number', sorted: true, width: 20},\n            {name: 'name', title: 'Name', type: 'text', sorted: true},\n            {name: 'description', title: 'Description', type: 'text', sorted: true},\n            {name: 'unit', title: 'Unit', type: 'text', width: 30},\n            {name: 'type', title: 'Type', type: 'select', options: types, sorted: true},\n            {name: 'len', title: 'Length', type: 'text', width: 20},\n            {name: 'factor', title: 'Factor', type: 'text', width: 20, expert: true},\n            {name: 'offset', title: 'Offset', type: 'text', width: 20, expert: true},\n            {name: 'formula', title: 'Formula', type: 'text', formulaDisabled: true, expert: true},\n            {name: 'role', title: 'Role', type: 'select', options: roles, sorted: true},\n            {name: 'room', title: 'Room', type: 'rooms'},\n            {name: 'cw', title: 'CW', type: 'checkbox', tooltip: 'Cyclic write'},\n            {name: 'isScale', title: 'SF', type: 'checkbox', tooltip: 'Store this value as scaling factor', expert: true, formulaDisabled: true},\n        ];\n\n        if (this.props.native.params.multiDeviceId) {\n            result.splice(1, 0,\n                {name: 'deviceId', title: 'Slave ID', type: 'number', sorted: true, width: 20},\n            );\n        }\n\n        return result;\n    }\n\n    addItem = () => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n        let newItem = {}\n        this.getFields().forEach(field => newItem[field.name] = '')\n        if (data.length) {\n            let sortedData = this.getSortedData();\n            let lastItem = sortedData[sortedData.length - 1].item;\n            newItem._address = parseInt(lastItem._address, 10) + (lastItem.len ? parseInt(lastItem.len, 10) : 1);\n            while(sortedData.find(item => item.item._address >= newItem._address && item.item._address + parseInt(item.item.len || 1, 10) < newItem._address)) {\n                newItem._address++;\n            }\n            newItem.deviceId = lastItem.deviceId;\n            newItem.type = lastItem.type;\n            newItem.len = lastItem.len;\n            newItem.factor = lastItem.factor;\n            newItem.offset = lastItem.offset;\n            newItem.formula = lastItem.formula;\n            newItem.role = lastItem.role;\n            newItem.cw = lastItem.cw;\n            newItem.isScale = lastItem.isScale;\n        } else {\n            newItem.role = 'level';\n            newItem.factor = 1;\n            newItem.offset = 0;\n            newItem._address = this.props.native.params.showAliases ? 30001 : 0;\n        }\n        newItem.address = this.addressToCanonical(newItem._address);\n        data.push(newItem);\n        this.props.onChange(this.nativeField, data);\n    }\n\n    getDisable = (index, name) => {\n        if (name === 'len') {\n            if (!['string', 'stringle'].includes(this.props.native[this.nativeField][index].type)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    changeParam = (index, name, value) => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n        data[index][name] = value;\n        if (name === 'type') {\n            if (['', 'uint16be', 'uint16le', 'int16be', 'int16le', 'uint8be', 'uint8le', 'int8be', 'int8le'].includes(value)) {\n                data[index].len = 1;\n            }\n            if (['uint32be', 'uint32le', 'uint32sw', 'uint32sb', 'int32be', 'int32le', 'int32sw', 'int32sb', 'floatbe', 'floatle', 'floatsw', 'floatsb', 'string', 'stringle'].includes(value)) {\n                data[index].len = 2;\n            }\n            if (['uint64be', 'uint64le', 'doublebe', 'doublele'].includes(value)) {\n                data[index].len = 4;\n            }\n        }\n\n        if (name === '_address') {\n            data[index]['address'] = this.addressToCanonical(value);\n        }\n\n        this.props.onChange(this.nativeField, data);\n    }\n}\n\nInputRegisters.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n    rooms: PropTypes.object,\n};\n\nexport default InputRegisters;\n","import PropTypes from 'prop-types';\n\nimport BaseRegisters from './BaseRegisters';\n\nimport roles from '../data/roles';\nimport types from '../data/types';\n\nclass HoldingRegisters extends BaseRegisters {\n    nativeField = 'holdingRegs';\n\n    getFields() {\n        //let rooms = this.getRooms();\n        //rooms.unshift({value: '', title: ''});\n\n        let result = [\n            {name: '_address', title: 'Address', type: 'number', sorted: true, width: 20},\n            {name: 'name', title: 'Name', type: 'text', sorted: true},\n            {name: 'description', title: 'Description', type: 'text', sorted: true},\n            {name: 'unit', title: 'Unit', type: 'text', width: 30},\n            {name: 'type', title: 'Type', type: 'select', options: types, sorted: true},\n            {name: 'len', title: 'Length', type: 'text', width: 20},\n            {name: 'factor', title: 'Factor', type: 'text', width: 20, expert: true},\n            {name: 'offset', title: 'Offset', type: 'text', width: 20, expert: true},\n            {name: 'formula', title: 'Formula', type: 'text', expert: true, formulaDisabled: true},\n            {name: 'role', title: 'Role', type: 'select', options: roles, sorted: true},\n            {name: 'room', title: 'Room', type: 'rooms'},\n            {name: 'poll', title: 'Poll', type: 'checkbox', tooltip: 'Enable polling of data point'},\n            {name: 'wp', title: 'WP', type: 'checkbox', tooltip: 'Write pulses (true → false edge)', expert: true},\n            {name: 'cw', title: 'CW', type: 'checkbox', tooltip: 'Cyclic write'},\n            {name: 'isScale', title: 'SF', type: 'checkbox', tooltip: 'Store this value as scaling factor', expert: true, formulaDisabled: true},\n        ];\n\n        if (this.props.native.params.multiDeviceId) {\n            result.splice(1, 0,\n                {name: 'deviceId', title: 'Slave ID', type: 'number', sorted: true, width: 20},\n            );\n        }\n\n        return result;\n    }\n\n    addItem = () => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n        let newItem = {}\n        this.getFields().forEach(field => newItem[field.name] = '');\n        if (data.length) {\n            let sortedData = this.getSortedData();\n            let lastItem = sortedData[sortedData.length - 1].item;\n            newItem._address = parseInt(lastItem._address, 10) + (lastItem.len ? parseInt(lastItem.len, 10) : 1);\n            while(sortedData.find(item => item.item._address >= newItem._address && item.item._address + parseInt(item.item.len || 1, 10) < newItem._address)) {\n                newItem._address++;\n            }\n            newItem.deviceId = lastItem.deviceId;\n            newItem.type = lastItem.type;\n            newItem.len = (lastItem.len ? parseInt(lastItem.len) : 1);\n            newItem.factor = lastItem.factor;\n            newItem.offset = lastItem.offset;\n            newItem.formula = lastItem.formula;\n            newItem.role = lastItem.role;\n            newItem.poll = lastItem.poll;\n            newItem.wp = lastItem.wp;\n            newItem.cw = lastItem.cw;\n            newItem.isScale = lastItem.isScale;\n        } else {\n            newItem.role = 'level';\n            newItem.factor = 1;\n            newItem.offset = 0;\n            newItem._address = this.props.native.params.showAliases ? 40001 : 0;\n        }\n        newItem.address = this.addressToCanonical(newItem._address);\n        data.push(newItem);\n        this.props.onChange(this.nativeField, data);\n    }\n\n    getDisable = (index, name) => {\n        return name === 'len' &&\n            !['string', 'stringle'].includes(this.props.native[this.nativeField][index].type);\n    }\n\n    changeParam = (index, name, value) => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n\n        data[index][name] = value;\n\n        if (name === 'type') {\n            if (['', 'uint16be', 'uint16le', 'int16be', 'int16le', 'uint8be', 'uint8le', 'int8be', 'int8le'].includes(value)) {\n                data[index].len = 1;\n            } else\n            if (['uint32be', 'uint32le', 'uint32sw', 'uint32sb', 'int32be', 'int32le', 'int32sw', 'int32sb', 'floatbe', 'floatle', 'floatsw', 'floatsb', 'string', 'stringle'].includes(value)) {\n                data[index].len = 2;\n            } else\n            if (['uint64be', 'uint64le', 'doublebe', 'doublele'].includes(value)) {\n                data[index].len = 4;\n            }\n        }\n\n        if (name === '_address') {\n            data[index]['address'] = this.addressToCanonical(value);\n        }\n\n        this.props.onChange(this.nativeField, data);\n    }\n}\n\nHoldingRegisters.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n    rooms: PropTypes.object,\n};\n\nexport default HoldingRegisters;\n","import PropTypes from 'prop-types';\n\nimport roles from '../data/roles';\n\nimport BaseRegisters from './BaseRegisters';\n\nclass DiscreteInputs extends BaseRegisters {\n    nativeField = 'disInputs';\n\n    getFields() {\n        let result = [\n            {name: '_address', title: 'Address', type: 'number', sorted: true, width: 20},\n            {name: 'name', title: 'Name', type: 'text', sorted: true},\n            {name: 'description', title: 'Description', type: 'text', sorted: true},\n            {name: 'formula', title: 'Formula', type: 'text', expert: true, formulaDisabled: true},\n            {name: 'role', title: 'Role', type: 'select', options: roles, sorted: true},\n            {name: 'room', title: 'Room', type: 'rooms'},\n            {name: 'cw', title: 'CW', type: 'checkbox', tooltip: 'Cyclic write'},\n            {name: 'isScale', title: 'SF', type: 'checkbox', tooltip: 'Store this value as scaling factor', expert: true, formulaDisabled: true},\n        ];\n\n        if (this.props.native.params.multiDeviceId) {\n            result.splice(1, 0,\n                {name: 'deviceId', title: 'Slave ID', type: 'number', sorted: true, width: 20},\n            );\n        }\n\n        return result;\n    }\n\n    isShowExtendedModeSwitch() {\n        return this.props.native.params.slave !== 1 && this.props.native.params.slave !== '1';\n    }\n\n    addItem = () => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n        let newItem = {}\n        this.getFields().forEach(field => newItem[field.name] = '')\n        if (data.length) {\n            let sortedData = this.getSortedData();\n            let lastItem = sortedData[sortedData.length - 1].item;\n            newItem._address = parseInt(lastItem._address, 10) + 1;\n            while(sortedData.find(item => item.item._address === newItem._address)) {\n                newItem._address++;\n            }\n            newItem.deviceId = lastItem.deviceId;\n            newItem.formula = lastItem.formula;\n            newItem.role = lastItem.role;\n            newItem.cw = lastItem.cw;\n            newItem.isScale = lastItem.isScale;\n        } else {\n            newItem.role = 'level';\n            newItem._address = this.props.native.params.showAliases ? 10001 : 0;\n        }\n        newItem.address = this.addressToCanonical(newItem._address);\n        data.push(newItem);\n        this.props.onChange(this.nativeField, data);\n    }\n}\n\nDiscreteInputs.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n    rooms: PropTypes.object,\n};\n\nexport default DiscreteInputs;\n","import PropTypes from 'prop-types';\n\nimport roles from '../data/roles';\n\nimport BaseRegisters from './BaseRegisters';\n\nclass Coils extends BaseRegisters {\n    nativeField = 'coils';\n\n    getFields() {\n        let result = [\n            {name: '_address', title: 'Address', type: 'number', sorted: true, width: 20},\n            {name: 'name', title: 'Name', type: 'text', sorted: true},\n            {name: 'description', title: 'Description', type: 'text', sorted: true},\n            {name: 'formula', title: 'Formula', type: 'text', expert: true, formulaDisabled: true},\n            {name: 'role', title: 'Role', type: 'select', options: roles, sorted: true},\n            {name: 'room', title: 'Room', type: 'rooms'},\n            {name: 'poll', title: 'Poll', type: 'checkbox'},\n            {name: 'wp', title: 'WP', type: 'checkbox', expert: true},\n            {name: 'cw', title: 'CW', type: 'checkbox'},\n            {name: 'isScale', title: 'SF', type: 'checkbox', tooltip: 'Store this value as scaling factor', expert: true, formulaDisabled: true},\n        ];\n\n        if (this.props.native.params.multiDeviceId) {\n            result.splice(1, 0,\n                {name: 'deviceId', title: 'Slave ID', type: 'number', sorted: true, width: 20},\n            );\n        }\n\n        return result;\n    }\n\n    addItem = () => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n        let newItem = {}\n        this.getFields().forEach(field => newItem[field.name] = '');\n        if (data.length) {\n            let sortedData = this.getSortedData();\n            let lastItem = sortedData[sortedData.length - 1].item;\n            newItem._address = parseInt(lastItem._address, 10) + 1;\n            while(sortedData.find(item => item.item._address === newItem._address)) {\n                newItem._address++;\n            }\n            newItem.deviceId = lastItem.deviceId;\n            newItem.formula = lastItem.formula;\n            newItem.role = lastItem.role;\n            newItem.poll = lastItem.poll;\n            newItem.wp = lastItem.wp;\n            newItem.cw = lastItem.cw;\n            newItem.isScale = lastItem.isScale;\n        } else {\n            newItem.role = 'level';\n            newItem._address = this.props.native.params.showAliases ? 1 : 0;\n        }\n        newItem.address = this.addressToCanonical(newItem._address);\n        data.push(newItem);\n        this.props.onChange(this.nativeField, data);\n    }\n}\n\nCoils.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n    rooms: PropTypes.object,\n};\n\nexport default Coils;\n","import React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { SnackbarProvider } from 'notistack';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport {AiOutlineFieldBinary as BinaryIcon} from 'react-icons/all';\nimport {TiSortNumerically as DigitsIcon} from 'react-icons/all';\n\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\nimport Loader from '@iobroker/adapter-react/Components/Loader'\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport TabOptions from './Tabs/Options';\nimport TabInputRegisters from './Tabs/InputRegisters';\nimport TabHoldingRegisters from './Tabs/HoldingRegisters';\nimport TabDiscreteInputs from './Tabs/DiscreteInputs';\nimport TabCoils from './Tabs/Coils';\n\nconst styles = theme => ({\n    root: {},\n    tabContent: {\n        padding: 10,\n        height: 'calc(100% - 64px - 48px - 20px)',\n        overflow: 'auto',\n    },\n    tabContentIFrame: {\n        padding: 10,\n        height: 'calc(100% - 64px - 48px - 20px - 38px)',\n        overflow: 'auto'\n    },\n    tab: {\n        width: '100%',\n        minHeight: '100%'\n    }\n});\n\nconst tabs = [\n    {\n        name: 'general',\n        title: 'General',\n        component: TabOptions,\n    },\n    {\n        name: 'discrete-inputs',\n        title: 'Discrete inputs',\n        component: TabDiscreteInputs,\n        icon: <BinaryIcon style={{width: 18, height: 18, marginRight: 4, display: 'inline-block'}}/>,\n        tooltip: 'Binary inputs (read-only)'\n    },\n    {\n        name: 'coils',\n        title: 'Coils',\n        component: TabCoils,\n        icon: <BinaryIcon style={{width: 18, height: 18, marginRight: 4, display: 'inline-block'}}/>,\n        tooltip: 'Binary inputs and outputs'\n    },\n    {\n        name: 'input-registers',\n        title: 'Input Registers',\n        component: TabInputRegisters,\n        icon: <DigitsIcon style={{width: 18, height: 18, marginRight: 4, display: 'inline-block'}}/>,\n        tooltip: 'Input registers (8-64 bit values, read-only)'\n    },\n    {\n        name: 'holding-registers',\n        title: 'Holding Registers',\n        component: TabHoldingRegisters,\n        icon: <DigitsIcon style={{width: 18, height: 18, marginRight: 4, display: 'inline-block'}}/>,\n        tooltip: 'Input/output registers (8-64 bit values)'\n    },\n]\n\nclass App extends GenericApp {\n    constructor(props) {\n        // TODO: delete it after adapter-react 1.0.27 (BF: 2021.06.09)\n        if (window.io && window.location.port === '3000') {\n            console.log('Reaload!');\n            delete window.io;\n            window.io = new window.SocketClient();\n        }\n        const extendedProps = {...props};\n        extendedProps.encryptedFields = ['pass'];\n\n        extendedProps.translations = {\n            'en': require('./i18n/en'),\n            'de': require('./i18n/de'),\n            'ru': require('./i18n/ru'),\n            'pt': require('./i18n/pt'),\n            'nl': require('./i18n/nl'),\n            'fr': require('./i18n/fr'),\n            'it': require('./i18n/it'),\n            'es': require('./i18n/es'),\n            'pl': require('./i18n/pl'),\n            'zh-cn': require('./i18n/zh-cn'),\n        };\n\n        super(props, extendedProps);\n        this.state.moreLoaded = false;\n        this.state.rooms = null;\n    }\n\n    onConnectionReady() {\n        super.onConnectionReady();\n        this.socket.getEnums('rooms')\n            .then(rooms =>\n                this.setState({moreLoaded: true, rooms}));\n    }\n\n    getSelectedTab() {\n        const selectedTab = this.state.selectedTab;\n        if (!selectedTab) {\n            return 0;\n        } else {\n            return tabs.findIndex(tab => tab.name === selectedTab);\n        }\n    }\n\n    render() {\n        if (!this.state.loaded || !this.state.moreLoaded) {\n            return <MuiThemeProvider theme={this.state.theme}>\n                <Loader theme={this.state.themeType} />\n            </MuiThemeProvider>;\n        }\n\n        return <MuiThemeProvider theme={this.state.theme}>\n            <SnackbarProvider>\n                <div className=\"App\" style={{background: this.state.theme.palette.background.default, color: this.state.theme.palette.text.primary}}>\n                    <AppBar position=\"static\">\n                        <Tabs\n                            value={this.getSelectedTab()}\n                            onChange={(e, index) => this.selectTab(tabs[index].name, index)}\n                            variant=\"scrollable\" scrollButtons=\"auto\">\n                            {tabs.map(tab => {\n                                return <Tab\n                                    label={tab.icon ? <>{tab.icon}{I18n.t(tab.title)}</> : I18n.t(tab.title)}\n                                    data-name={tab.name}\n                                    key={tab.name}\n                                    title={tab.tooltip ? I18n.t(tab.tooltip) : undefined}\n                                />\n                            })}\n                        </Tabs>\n                    </AppBar>\n                    <div className={this.isIFrame ? this.props.classes.tabContentIFrame : this.props.classes.tabContent}>\n                        {tabs.map((tab, index) => {\n                            const TabComponent = tab.component;\n                            if (this.state.selectedTab) {\n                                if (this.state.selectedTab !== tab.name) {\n                                    return null;\n                                }\n                            } else {\n                                if (index !== 0) {\n                                    return null;\n                                }\n                            }\n                            return <TabComponent\n                                key={tab.name}\n                                formulaDisabled={this.state.native.params.slave === '1' || this.state.native.params.slave === 1}\n                                common={this.common}\n                                socket={this.socket}\n                                native={this.state.native}\n                                onError={text => this.setState({errorText: (text || text === 0) && typeof text !== 'string' ? text.toString() : text})}\n                                onLoad={native => this.onLoadConfig(native)}\n                                instance={this.instance}\n                                adapterName={this.adapterName}\n                                changed={this.state.changed}\n                                onChange={(attr, value, cb) => this.updateNativeValue(attr, value, cb)}\n                                changeNative={(value) => this.setState({native: value, changed: this.getIsChanged(value)})}\n                                rooms={this.state.rooms}\n                            />\n                        })}\n                    </div>\n                    {this.renderError()}\n                    {this.renderSaveCloseButtons()}\n                </div>\n            </SnackbarProvider>\n        </MuiThemeProvider>;\n    }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport * as SentryIntegrations from '@sentry/integrations';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {version} from '../package.json';\nimport theme from '@iobroker/adapter-react/Theme';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nwindow.adapterName = 'modbus';\nlet themeName = Utils.getThemeName();\n\nconsole.log(`iobroker.${window.adapterName}@${version} using theme \"${themeName}\"`);\n\nfunction build() {\n    return ReactDOM.render(\n        <MuiThemeProvider theme={theme(themeName)}>\n            <App\n                onThemeChange={_theme => {\n                    themeName = _theme;\n                    build();\n                }}\n            />\n        </MuiThemeProvider>,\n        document.getElementById('root')\n    );\n}\n\nif (false && window.location.host !== 'localhost:3000') {\n    Sentry.init({\n        dsn: 'https://5ad729dbed504d15aa8bde423cae9a8e@sentry.iobroker.net/57',\n        release: `iobroker.${window.adapterName}@${version}`,\n        integrations: [\n            new SentryIntegrations.Dedupe()\n        ]\n    });\n}\n\nbuild();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}