{"version":3,"sources":["Tabs/Options.js","Components/TsvDialog.js","Components/DeleteAllDialog.js","Components/DeleteDialog.js","Components/RegisterTable.js","Tabs/BaseRegisters.js","Tabs/InputRegisters.js","Tabs/HoldingRegisters.js","Tabs/DiscreteInputs.js","Tabs/Coils.js","App.js","serviceWorker.js","index.js"],"names":["Options","props","inputDisabled","input","name","native","params","type","showAliases","slave","onlyUseWriteMultipleRegisters","doNotUseWriteMultipleRegisters","inputDisplay","includes","changeParam","value","JSON","parse","stringify","multiDeviceId","readIPs","readPorts","disInputs","forEach","item","_address","inputRegs","holdingRegs","directAddresses","changeNative","state","ports","customPort","ips","this","socket","getState","adapterName","instance","then","val","sendTo","list","error","console","length","path","warn","map","title","manufacturer","comName","find","setState","catch","e","getIpAddresses","common","host","ip","unshift","inputs","Paper","className","classes","optionsContainer","Typography","variant","gutterBottom","header","I18n","t","FormControl","optionContainer","FormControlLabel","label","control","Checkbox","optionsCheckbox","disabled","checked","onChange","target","help","FormHelperText","helperText","dimension","Box","InputLabel","Select","optionsSelect","options","option","MenuItem","TextField","optionsTextfield","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","tab","Grid","container","spacing","xs","md","optionsGrid","getInputsBlock","connectionInputs","generalInputs","Component","withStyles","theme","width","display","alignItems","paddingTop","paddingBottom","marginTop","marginLeft","marginBottom","padding","textAlign","fontSize","tsvEditor","height","tsvEditorTextarea","fontFamily","useState","tsv","setTsv","useEffect","tsvResult","push","fields","field","data","undefined","toString","json2tsv","open","enqueueSnackbar","useSnackbar","Dialog","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","DialogContentText","showPrintMargin","setOptions","firstLineNumber","mode","DialogActions","Button","color","Utils","copyToClipboard","startIcon","tsv2json","shift","success","errors","index","parseInt","itemValues","itemIndex","save","DeleteAllDialog","action","DeleteDialog","disableWarnings","setDisableWarnings","DataCell","result","sortedItem","editMode","setEditMode","ref","useRef","Tooltip","inputRef","tableCheckbox","getDisable","$index","rooms","allowNone","dense","inputProps","tableSelect","tableSelectContainer","tableTextFieldContainer","tableTextField","TableCell","clsx","tableCell","nonEditMode","window","localStorage","setItem","setTimeout","current","focus","tableHeader","whiteSpace","fontWeight","tableHeaderExtended","palette","primary","light","dark","tableContainer","overflow","maxHeight","cusrsor","tsvDialogOpen","setTsvDialogOpen","getItem","extendedMode","setExtendedMode","deleteAllDialog","setDeleteAllDialog","deleteDialog","setDeleteDialog","sortedData","getSortedData","orderBy","order","addItem","Switch","showExtendedModeSwitch","Table","size","stickyHeader","TableHead","TableRow","filter","expert","formulaDisabled","isChecked","indeterminate","trueFound","falseFound","k","style","tooltip","newData","changeData","sorted","TableSortLabel","active","direction","isAsc","onChangeOrder","TableBody","hover","lastTime","sessionStorage","Date","deleteItem","disableDialogs","toISOString","BaseRegisters","nativeField","newItem","getFields","splice","sort","sortedItem1","sortedItem2","sort1","sort2","deviceId","isShowExtendedModeSwitch","InputRegisters","lastItem","len","factor","offset","formula","role","cw","isScale","types","roles","propTypes","PropTypes","object","isRequired","number","string","onError","func","onLoad","changed","bool","HoldingRegisters","poll","wp","DiscreteInputs","Coils","tabs","component","TabOptions","TabDiscreteInputs","icon","marginRight","TabCoils","TabInputRegisters","TabHoldingRegisters","App","io","location","port","log","SocketClient","extendedProps","encryptedFields","translations","require","moreLoaded","getEnums","selectedTab","findIndex","loaded","background","default","text","AppBar","Tabs","getSelectedTab","selectTab","scrollButtons","Tab","data-name","isIFrame","tabContentIFrame","tabContent","TabComponent","errorText","onLoadConfig","attr","cb","updateNativeValue","getIsChanged","renderError","renderSaveCloseButtons","themeType","GenericApp","root","minHeight","Boolean","hostname","match","themeName","getThemeName","version","build","ReactDOM","render","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"w47DA2DMA,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAsDVC,cAAgB,SAAAC,GACZ,MAAmB,UAAfA,EAAMC,MAAsD,QAAlC,EAAKH,MAAMI,OAAOC,OAAOC,OAGpC,oBAAfJ,EAAMC,OAA+B,EAAKH,MAAMI,OAAOC,OAAOE,cAG/C,kBAAfL,EAAMC,OAAgE,MAAnC,EAAKH,MAAMI,OAAOC,OAAOG,OAAoD,IAAnC,EAAKR,MAAMI,OAAOC,OAAOG,WAGvF,mCAAfN,EAAMC,OAA6C,EAAKH,MAAMI,OAAOC,OAAOI,kCAG7D,kCAAfP,EAAMC,OAA4C,EAAKH,MAAMI,OAAOC,OAAOK,oCApEhE,EA2EnBC,aAAe,SAAAT,GACX,GAAI,CAAC,MAAO,UAAUU,SAAS,EAAKZ,MAAMI,OAAOC,OAAOC,OACpD,GAAI,CAAC,UAAW,WAAY,WAAY,WAAY,UAAUM,SAASV,EAAMC,MACzE,OAAO,OAGX,GAAI,CAAC,OAAQ,QAAQS,SAASV,EAAMC,MAChC,OAAO,EAGf,OAAO,GArFQ,EAmNnBU,YAAc,SAACV,EAAMW,GACjB,IAAIV,EAASW,KAAKC,MAAMD,KAAKE,UAAU,EAAKjB,MAAMI,SAClDA,EAAOC,OAAOF,GAAQW,EACT,UAATX,EACc,MAAVW,GAA2B,IAAVA,IACjBV,EAAOC,OAAOa,eAAgB,EACQ,WAAlC,EAAKlB,MAAMI,OAAOC,OAAOC,MACzB,EAAKa,WAIJ,SAAThB,GACc,QAAVW,GAA4C,IAAxBV,EAAOC,OAAOG,OAAuC,MAAxBJ,EAAOC,OAAOG,QAC/DJ,EAAOC,OAAOG,MAAQ,KAGZ,WAAVM,GACA,EAAKM,YAEK,WAAVN,GAA0D,MAAnC,EAAKd,MAAMI,OAAOC,OAAOG,OAAoD,IAAnC,EAAKR,MAAMI,OAAOC,OAAOG,OAC1F,EAAKW,WAGA,gBAAThB,IACAC,EAAOiB,UAAUC,SAAQ,SAAAC,GAAI,OAAKT,EAAQS,EAAKC,UAAY,IAAQD,EAAKC,UAAY,OACpFpB,EAAOqB,UAAUH,SAAQ,SAAAC,GAAI,OAAKT,EAAQS,EAAKC,UAAY,IAAQD,EAAKC,UAAY,OACpFpB,EAAOsB,YAAYJ,SAAQ,SAAAC,GAAI,OAAKT,EAAQS,EAAKC,UAAY,IAAQD,EAAKC,UAAY,OACjFV,IACDV,EAAOC,OAAOsB,iBAAkB,IAGxC,EAAK3B,MAAM4B,aAAaxB,IA/OxB,EAAKyB,MAAQ,CACTC,MAAO,KACPC,YAAY,EACZC,IAAK,MANM,E,6CAUnB,WAAa,IAAD,OACR,OAAOC,KAAKjC,MAAMkC,OAAOC,SAAlB,yBAA6CF,KAAKjC,MAAMoC,YAAxD,YAAuEH,KAAKjC,MAAMqC,SAAlF,WACFC,MAAK,SAAAT,GACF,GAAIA,GAASA,EAAMU,IACf,OAAO,EAAKvC,MAAMkC,OAAOM,OAAO,EAAKxC,MAAMoC,YAAc,IAAM,EAAKpC,MAAMqC,SAAU,WAAY,MAC3FC,MAAK,SAAAG,GACF,GAAIA,GAAQA,EAAKC,MACbC,QAAQD,MAAM,sBAAwBD,EAAKC,YAE/C,GAAID,GAAwB,IAAhBA,EAAKG,QAAgBH,EAAK,IAAuB,kBAAjBA,EAAK,GAAGI,KAChDF,QAAQG,KAAK,yBACV,CACH,IAAMhB,EAAQW,EAAKM,KAAI,SAAAxB,GAAI,MAAK,CAACT,MAAOS,EAAKsB,KAAMG,MAAOzB,EAAKsB,MAAQtB,EAAK0B,aAAe,KAAO1B,EAAK0B,aAAe,IAAM,QACtHlB,EAAa,EAAK/B,MAAMI,OAAOC,OAAO6C,UAAYpB,EAAMqB,MAAK,SAAA5B,GAAI,OAAIA,EAAKT,QAAU,EAAKd,MAAMI,OAAOC,OAAO6C,WAEnH,EAAKE,SAAS,CAACtB,QAAOC,mBAG7BsB,OAAM,SAAAC,GAAC,OAAIX,QAAQD,MAAM,sBAAwBY,SAG7DD,OAAM,SAAAC,GAAC,OAAIX,QAAQD,MAAM,sBAAwBY,Q,qBAG1D,WAAW,IAAD,OACN,OAAOrB,KAAKjC,MAAMkC,OAAOqB,eAAetB,KAAKjC,MAAMwD,OAAOC,MACrDnB,MAAK,SAAAN,IAEFA,GADAA,EAAMA,GAAO,IACHe,KAAI,SAAAW,GAAE,MAAK,CAAC5C,MAAO4C,EAAIV,MAAOU,OACpCC,QAAQ,CAAC7C,MAAO,UAAWkC,MAAO,sBACtChB,EAAI2B,QAAQ,CAAC7C,MAAO,YAAakC,MAAO,0BACxC,EAAKI,SAAS,CAACpB,WAElBqB,OAAM,SAAAC,GAAC,OAAIX,QAAQD,MAAM,6BAA+BY,Q,+BAGjE,WAC0C,WAAlCrB,KAAKjC,MAAMI,OAAOC,OAAOC,MACzB2B,KAAKb,YAE6B,WAAlCa,KAAKjC,MAAMI,OAAOC,OAAOC,MAAyD,MAAnC2B,KAAKjC,MAAMI,OAAOC,OAAOG,OAAoD,IAAnCyB,KAAKjC,MAAMI,OAAOC,OAAOG,OAClHyB,KAAKd,Y,4BAqCb,SAAeyC,EAAQZ,GAAQ,IAAD,OAC1B,OAAO,mCAAE,eAACa,EAAA,EAAD,CAAOC,UAAW7B,KAAKjC,MAAM+D,QAAQC,iBAArC,UACL,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACL,UAAW7B,KAAKjC,MAAM+D,QAAQK,OAApE,SAA6EC,IAAKC,EAAEtB,KACnFY,EAAOb,KAAI,SAAA7C,GACR,OAAK,EAAKS,aAAaT,GAEG,SAAfA,EAAMC,MAAqD,WAAlC,EAAKH,MAAMI,OAAOC,OAAOC,MAAyD,MAAnC,EAAKN,MAAMI,OAAOC,OAAOG,OAAoD,IAAnC,EAAKR,MAAMI,OAAOC,OAAOG,MA6BnI,aAAfN,EAAMI,KACC,eAACiE,EAAA,EAAD,CAAaT,UAAW,EAAK9D,MAAM+D,QAAQS,gBAA3C,UACH,cAACC,EAAA,EAAD,CACIC,MAAOL,IAAKC,EAAEpE,EAAM8C,OACpB2B,QAAS,cAACC,EAAA,EAAD,CACLF,MAAOL,IAAKC,EAAEpE,EAAM8C,OACpBc,UAAW,EAAK9D,MAAM+D,QAAQc,gBAC9BC,SAAU,EAAK7E,cAAcC,GAC7B6E,QAAS,EAAK/E,MAAMI,OAAOC,OAAOH,EAAMC,MACxC6E,SAAU,SAAA1B,GAAC,OAAI,EAAKzC,YAAYX,EAAMC,KAAMmD,EAAE2B,OAAOF,cAG5D7E,EAAMgF,KAAO,cAACC,EAAA,EAAD,CAAgBrB,UAAW,EAAK9D,MAAM+D,QAAQqB,WAA9C,SAA2Df,IAAKC,EAAEpE,EAAMgF,QAA0B,KAC/GhF,EAAMmF,UAAYhB,IAAKC,EAAEpE,EAAMmF,WAAa,OAZuBnF,EAAMC,MAcxD,WAAfD,EAAMI,KACN,eAACgF,EAAA,EAAD,CAAKxB,UAAW,EAAK9D,MAAM+D,QAAQS,gBAAnC,UACH,eAACD,EAAA,EAAD,WACI,cAACgB,EAAA,EAAD,UAAalB,IAAKC,EAAEpE,EAAM8C,SAC1B,cAACwC,EAAA,EAAD,CACI1B,UAAW,EAAK9D,MAAM+D,QAAQ0B,cAC9BX,SAAU,EAAK7E,cAAcC,GAC7BY,MAAO,EAAKd,MAAMI,OAAOC,OAAOH,EAAMC,OAAS,GAC/C6E,SAAU,SAAA1B,GAAC,OAAI,EAAKzC,YAAYX,EAAMC,KAAMmD,EAAE2B,OAAOnE,QAJzD,SAMKZ,EAAMwF,QAAQ3C,KAAI,SAAA4C,GAAM,OACrB,cAACC,EAAA,EAAD,CAA6B9E,MAAO6E,EAAO7E,MAA3C,SAAmD6E,EAAO3C,OAA3C2C,EAAO7E,eAV/B,IAaaZ,EAAMmF,UAAYhB,IAAKC,EAAEpE,EAAMmF,WAAa,OAbAnF,EAAMC,MAe/C,UAAfD,EAAMI,KACP,eAACgF,EAAA,EAAD,CAAKxB,UAAW,EAAK9D,MAAM+D,QAAQS,gBAAnC,UACF,EAAK3C,MAAMC,QAAU,EAAKD,MAAME,WAC7B,eAACwC,EAAA,EAAD,WACI,cAACgB,EAAA,EAAD,UAAalB,IAAKC,EAAEpE,EAAM8C,SAC1B,cAACwC,EAAA,EAAD,CACI1B,UAAW,EAAK9D,MAAM+D,QAAQ0B,cAC9BX,SAAU,EAAK7E,cAAcC,GAC7BY,MAAO,EAAKd,MAAMI,OAAOC,OAAOH,EAAMC,OAAS,GAC/C6E,SAAU,SAAA1B,GAAC,OAAI,EAAKzC,YAAYX,EAAMC,KAAMmD,EAAE2B,OAAOnE,QAJzD,SAMK,EAAKe,MAAMC,MAAMiB,KAAI,SAAA4C,GAAM,OACxB,cAACC,EAAA,EAAD,CAA6B9E,MAAO6E,EAAO7E,MAA3C,SAAmD6E,EAAO3C,OAA3C2C,EAAO7E,eAKlC,cAAC+E,EAAA,EAAD,CACIvF,KAAMJ,EAAMI,KACZoE,MAAOL,IAAKC,EAAEpE,EAAM8C,OACpBc,UAAW,EAAK9D,MAAM+D,QAAQ+B,iBAC9BhB,SAAU,EAAK7E,cAAcC,GAC7BkF,WAAYlF,EAAMgF,KAAOb,IAAKC,EAAEpE,EAAMgF,MAAQ,GAC9CpE,MAAO,EAAKd,MAAMI,OAAOC,OAAOH,EAAMC,MACtC4F,WAAY,CAACC,aAAc9F,EAAMmF,UAAY,cAACY,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SAAgC7B,IAAKC,EAAEpE,EAAMmF,aAA+B,MACzHL,SAAU,SAAA1B,GAAC,OAAI,EAAKzC,YAAYX,EAAMC,KAAMmD,EAAE2B,OAAOnE,UAExD,EAAKe,MAAMC,MAAQ,cAACqE,EAAA,EAAD,CAAYC,QAAS,kBAAM,EAAKhD,SAAS,CAACrB,YAAa,EAAKF,MAAME,cAAlE,SAAgF,cAAC,IAAD,MAA2B,OA1BvE7B,EAAMC,MA6B/D,cAACmF,EAAA,EAAD,CAAKxB,UAAW,EAAK9D,MAAM+D,QAAQS,gBAAnC,SACH,cAACqB,EAAA,EAAD,CACIvF,KAAMJ,EAAMI,KACZoE,MAAOL,IAAKC,EAAEpE,EAAM8C,OACpBc,UAAW,EAAK9D,MAAM+D,QAAQ+B,iBAC9BhB,SAAU,EAAK7E,cAAcC,GAC7BkF,WAAYlF,EAAMgF,KAAOb,IAAKC,EAAEpE,EAAMgF,MAAQ,GAC9CpE,MAAO,EAAKd,MAAMI,OAAOC,OAAOH,EAAMC,MACtC4F,WAAY,CAACC,aAAc9F,EAAMmF,UAAY,cAACY,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SAAgC7B,IAAKC,EAAEpE,EAAMmF,aAA+B,MACzHL,SAAU,SAAA1B,GAAC,OAAI,EAAKzC,YAAYX,EAAMC,KAAMmD,EAAE2B,OAAOnE,WATGZ,EAAMC,MAzF/D,cAACmF,EAAA,EAAD,CAAKxB,UAAW,EAAK9D,MAAM+D,QAAQS,gBAAnC,SACF,EAAK3C,MAAMG,IACR,eAACuC,EAAA,EAAD,WACI,cAACgB,EAAA,EAAD,UAAalB,IAAKC,EAAE,sBACpB,cAACkB,EAAA,EAAD,CACI1B,UAAW,EAAK9D,MAAM+D,QAAQ0B,cAC9BX,SAAU,EAAK7E,cAAcC,GAC7BY,MAAO,EAAKd,MAAMI,OAAOC,OAAOH,EAAMC,OAAS,GAC/C6E,SAAU,SAAA1B,GAAC,OAAI,EAAKzC,YAAYX,EAAMC,KAAMmD,EAAE2B,OAAOnE,QAJzD,SAMK,EAAKe,MAAMG,IAAIe,KAAI,SAAA4C,GAAM,OACtB,cAACC,EAAA,EAAD,CAA6B9E,MAAO6E,EAAO7E,MAA3C,SAAmD6E,EAAO3C,OAA3C2C,EAAO7E,eAKlC,cAAC+E,EAAA,EAAD,CACIvF,KAAMJ,EAAMI,KACZoE,MAAOL,IAAKC,EAAE,oBACdR,UAAW,EAAK9D,MAAM+D,QAAQ+B,iBAC9BhB,SAAU,EAAK7E,cAAcC,GAC7BkF,WAAYlF,EAAMgF,KAAOb,IAAKC,EAAEpE,EAAMgF,MAAQ,GAC9CpE,MAAO,EAAKd,MAAMI,OAAOC,OAAOH,EAAMC,MACtC4F,WAAY,CAACC,aAAc9F,EAAMmF,UAAY,cAACY,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SAAgC7B,IAAKC,EAAEpE,EAAMmF,aAA+B,MACzHL,SAAU,SAAA1B,GAAC,OAAI,EAAKzC,YAAYX,EAAMC,KAAMmD,EAAE2B,OAAOnE,WAxBDZ,EAAMC,MAF/D,e,oBA6GvB,WACI,OAAO,sBAAM2D,UAAY7B,KAAKjC,MAAM+D,QAAQsC,IAArC,SACH,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAM/E,MAAI,EAACkF,GAAI,GAAIC,GAAI,EAAG5C,UAAY7B,KAAKjC,MAAM+D,QAAQ4C,YAAzD,SAAwE1E,KAAK2E,eAAeC,EAAkB,2BAC9G,cAACP,EAAA,EAAD,CAAM/E,MAAI,EAACkF,GAAI,GAAIC,GAAI,EAAG5C,UAAY7B,KAAKjC,MAAM+D,QAAQ4C,YAAzD,SAAwE1E,KAAK2E,eAAeE,EAAe,sB,GA/MrGC,aAoQPC,eArSA,SAAAC,GAAK,MAAK,CACrBxB,cAAe,CACXyB,MAAO,KAEXpB,iBAAkB,CACdoB,MAAO,KAEX1C,gBAAiB,CACb2C,QAAS,OACTC,WAAY,QACZC,WAAY,EACZC,cAAe,GAEnBlC,WAAY,CACRmC,WAAY,EACZC,WAAY,GACZC,aAAc,IAElBzD,iBAAkB,CACdkD,MAAM,eAAD,OAAiBD,EAAMT,QAAQ,GAA/B,OACLkB,QAAST,EAAMT,QAAQ,GACvBW,QAAS,eACTQ,UAAW,QAEfhB,YAAa,CACTgB,UAAW,SACXD,QAAST,EAAMT,QAAQ,IAE3BpC,OAAQ,CACJwD,SAAU,OAwQHZ,CAAmBjH,G,maClMnBiH,gBAvGA,SAAAC,GAAK,MAAK,CACrBY,UAAW,CACPX,MAAO,OACPY,OAAQ,KAEZC,kBAAmB,CACfC,WAAY,gBAiGLhB,EA7FG,SAAChH,GACf,MAAsBiI,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACAC,qBAAU,WACN,IAAIC,EAAY,GAChBA,EAAUC,KAAKtI,EAAMuI,OAAOxF,KAAI,SAAAyF,GAAK,OAAIA,EAAMrI,SAC/CH,EAAMyI,KAAKnH,SAAQ,SAAAC,GAAI,OACnB8G,EAAUC,KAAKtI,EAAMuI,OAAOxF,KAAI,SAAAyF,GAAK,YAAyBE,IAArBnH,EAAKiH,EAAMrI,MAAsBoB,EAAKiH,EAAMrI,MAAMwI,WAAa,UAE5GR,EAAOS,oBAASP,MACjB,CAACrI,EAAM6I,OACV,IAAQC,EAAoBC,cAApBD,gBAER,IAAK9I,EAAM6I,KACP,OAAO,KAsCX,OAAO,eAACG,GAAA,EAAD,CACHH,KAAM7I,EAAM6I,KACZI,QAASjJ,EAAMiJ,QACfC,SAAS,KACTC,WAAS,EAJN,UAMH,cAACC,GAAA,EAAD,UAAc/E,IAAKC,EAAE,sBACrB,eAAC+E,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,UAAoBjF,IAAKC,EAAE,+CAC3B,8BACI,cAAC,KAAD,CACIU,SAAU,SAAA1B,GAAC,OAAI6E,EAAO7E,IACtBwE,OAAO,QACPyB,iBAAiB,EACjBzI,MAAOoH,EACPpE,UAAW9D,EAAM+D,QAAQ8D,UACzBX,MAAM,OACNsC,WAAY,CAACC,gBAAiB,GAC9BC,KAAM,YAIlB,eAACC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAQ1F,QAAQ,WAAW2F,MAAM,UAAUzD,QAAS,SAAA9C,GAChDwG,KAAMC,gBAAgB7B,EAAK5E,GAC3BwF,EAAgBzE,IAAKC,EAAE,iCACxB0F,UAAW,cAAC,KAAD,IAHd,SAGiC3F,IAAKC,EAAE,uBACxC,cAACsF,GAAA,EAAD,CAAQ1F,QAAQ,YAAY2F,MAAM,UAAUzD,QA9DpC,WACZ,IAAIqC,EAAOwB,oBAAS/B,GAChBK,EAASE,EAAKyB,QACdC,GAAU,EACVC,EAAS,GACb,IAAK,IAAIC,KAASrK,EAAMuI,OAChBvI,EAAMuI,OAAO8B,GAAOlK,OAASoI,EAAO8B,KACpCD,EAAO9B,KAAK,iDAAW,4BAAItI,EAAMuI,OAAO8B,GAAOlK,OAAnC,gBAAyD,4BAAImK,SAASD,GAAS,IAA/E,QACZF,GAAU,GAIlB1B,EAAOA,EAAK1F,KAAI,SAACwH,EAAYC,GACzB,IAAIjJ,EAAO,GACX,IAAK,IAAI8I,KAASrK,EAAMuI,OACa,WAA7BvI,EAAMuI,OAAO8B,GAAO/J,MAAsBN,EAAMuI,OAAO8B,GAAO3E,QAAQ3C,KAAI,SAAA4C,GAAM,OAAIA,EAAO7E,SAAOF,SAAS2J,EAAWF,MACtHD,EAAO9B,KAAK,8CAAQ,4BAAIiC,EAAWF,KAAvB,uBAAsD,4BAAIrK,EAAMuI,OAAO8B,GAAOlK,OAA9E,gBAAoG,4BAAImK,SAASE,GAAa,IAA9H,QACZL,GAAU,GAEmB,aAA7BnK,EAAMuI,OAAO8B,GAAO/J,OACpBiK,EAAWF,GAA+B,SAAtBE,EAAWF,IAEnC9I,EAAKvB,EAAMuI,OAAO8B,GAAOlK,MAAQoK,EAAWF,GAEhD,OAAO9I,KAGN4I,GAILnK,EAAMyK,KAAKhC,GACXzI,EAAMiJ,WAJFH,EAAgB,8BAAMsB,EAAOrH,KAAI,SAACL,EAAO2H,GAAR,OAAkB,8BAAkB3H,GAAR2H,QAA8B,CAAEnG,QAAS,WAkCxC8F,UAAW,cAAC,KAAD,IAAzE,SAAwF3F,IAAKC,EAAE,YAC/F,cAACsF,GAAA,EAAD,CAAQ1F,QAAQ,YAAYkC,QAASpG,EAAMiJ,QAASe,UAAW,cAAC,KAAD,IAA/D,SAA+E3F,IAAKC,EAAE,oBC1EnFoG,GAvBS,SAAC1K,GACrB,OAAOA,EAAM6I,KAAO,eAACG,GAAA,EAAD,CAAQH,KAAM7I,EAAM6I,KAAMI,QAASjJ,EAAMiJ,QAAzC,UAChB,cAACG,GAAA,EAAD,UAAc/E,IAAKC,EAAE,sBACrB,eAAC+E,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,UAAoBjF,IAAKC,EAAE,uCAC3B,eAACqF,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAQ1F,QAAQ,YAAY2F,MAAM,YAAYG,UAAW,cAAC,KAAD,IAAgB5D,QAAS,WAC9EpG,EAAM2K,SACN3K,EAAMiJ,WAFV,SAGI5E,IAAKC,EAAE,sBACX,cAACsF,GAAA,EAAD,CAAQ1F,QAAQ,YAAYkC,QAASpG,EAAMiJ,QAASe,UAAW,cAAC,KAAD,IAA/D,SAA+E3F,IAAKC,EAAE,qBAGtF,MCyBDsG,GAnCM,SAAC5K,GAClB,MAA8CiI,oBAAS,GAAvD,mBAAO4C,EAAP,KAAwBC,EAAxB,KAKA,OAJA1C,qBAAU,WACN0C,GAAmB,KACpB,CAAC9K,EAAM6I,OAEH7I,EAAM6I,KAAO,eAACG,GAAA,EAAD,CAAQH,KAAM7I,EAAM6I,KAAMI,QAASjJ,EAAMiJ,QAAzC,UAChB,cAACG,GAAA,EAAD,UAAc/E,IAAKC,EAAE,iBACrB,eAAC+E,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,UAAoBjF,IAAKC,EAAE,iDAAkDtE,EAAMuB,KAAKC,YACxF,cAAC8H,GAAA,EAAD,UAAmB,cAAC7E,EAAA,EAAD,CACfC,MAAOL,IAAKC,EAAE,wCACdK,QAAS,cAACC,EAAA,EAAD,CACLG,QAAS8F,EACT7F,SAAU,SAAA1B,GAAC,OAAIwH,EAAmBxH,EAAE2B,OAAOF,gBAEnD,eAAC4E,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAQ1F,QAAQ,YAAY2F,MAAM,YAAYG,UAAW,cAAC,KAAD,IAAgB5D,QAAS,WAC9EpG,EAAM2K,OAAOE,GACb7K,EAAMiJ,WAFV,SAGI5E,IAAKC,EAAE,YACX,cAACsF,GAAA,EAAD,CAAQ1F,QAAQ,YAAYkC,QAASpG,EAAMiJ,QAASe,UAAW,cAAC,KAAD,IAA/D,SAA+E3F,IAAKC,EAAE,qBAGtF,MC6BVyG,GAAW,SAAA/K,GACb,IAcIgL,EAdEC,EAAajL,EAAMiL,WACnBzC,EAAQxI,EAAMwI,MACd0C,EAAWlL,EAAMkL,SACjBC,EAAcnL,EAAMmL,YAEpBC,EAAMC,mBAQR9J,EAAO0J,EAAW1J,KAEtB,GAAmB,aAAfiH,EAAMlI,KAOF0K,EANCE,EAMQ,cAACI,GAAA,EAAD,CAAStI,MAAOqB,IAAKC,EAAEkE,EAAMxF,OAA7B,SACL,cAAC4B,EAAA,EAAD,CACI2G,SAAUH,EACVtH,UAAW9D,EAAM+D,QAAQyH,cACzBzG,UAAWxD,EAAKiH,EAAMrI,MACtB2E,SAAU9E,EAAMyL,WAAWR,EAAWS,OAAQlD,EAAMrI,MACpD6E,SAAU,SAAA1B,GAAC,OAAItD,EAAMa,YAAYoK,EAAWS,OAAQlD,EAAMrI,KAAMmD,EAAE2B,OAAOF,cAXxE,cAACH,EAAA,EAAD,CACLG,UAAWxD,EAAKiH,EAAMrI,MACtB2E,UAAQ,SAab,GAAmB,UAAf0D,EAAMlI,KAIT0K,EAHCE,EAGQ,cAAC,KAAD,CACLzI,KAAMzC,EAAM2L,MACZC,WAAW,EACX9K,WAA4B4H,IAArBnH,EAAKiH,EAAMrI,OAA4C,OAArBoB,EAAKiH,EAAMrI,MAAiB,GAAKoB,EAAKiH,EAAMrI,MACrF0L,OAAO,EACPC,WAAY,CAACV,MAAKtH,UAAW9D,EAAM+D,QAAQgI,aAC3CjH,SAAU9E,EAAMyL,WAAWR,EAAWS,OAAQlD,EAAMrI,MACpD6E,SAAU,SAAAlE,GAAK,OAAId,EAAMa,YAAYoK,EAAWS,OAAQlD,EAAMrI,KAAMW,IACpEgD,UAAW9D,EAAM+D,QAAQiI,uBAVpB,cAAC,KAAD,CAAcvJ,KAAMzC,EAAM2L,MAAO7K,MAAOS,EAAKiH,EAAMrI,aAa7D,GAAmB,WAAfqI,EAAMlI,KACb,GAAK4K,EAIDF,EAAS,cAACxF,EAAA,EAAD,CACL1E,WAA4B4H,IAArBnH,EAAKiH,EAAMrI,OAA4C,OAArBoB,EAAKiH,EAAMrI,MAAiB,GAAKoB,EAAKiH,EAAMrI,MACrF2L,WAAY,CAACV,MAAKtH,UAAW9D,EAAM+D,QAAQgI,aAC3CjH,SAAU9E,EAAMyL,WAAWR,EAAWS,OAAQlD,EAAMrI,MACpD6E,SAAU,SAAA1B,GAAC,OAAItD,EAAMa,YAAYoK,EAAWS,OAAQlD,EAAMrI,KAAMmD,EAAE2B,OAAOnE,QACzEgD,UAAW9D,EAAM+D,QAAQiI,qBALpB,SAOJxD,EAAM9C,QAAQ3C,KAAI,SAAA4C,GAAM,OACrB,cAACC,EAAA,EAAD,CAA6B9E,MAAO6E,EAAO7E,MAA3C,SAAmD6E,EAAO3C,MAAQ2C,EAAO3C,MAAQ,4BAAIqB,IAAKC,EAAE,cAA7EqB,EAAO7E,gBAZnB,CACX,IAAI6E,EAAS6C,EAAM9C,QAAQvC,MAAK,SAAAwC,GAAM,OAAIA,EAAO7E,QAAUS,EAAKiH,EAAMrI,SACtE6K,EAASrF,EAASA,EAAO3C,MAAQ,QAkBjCgI,EAHCE,EAGQ,cAACrF,EAAA,EAAD,CACL/E,WAA4B4H,IAArBnH,EAAKiH,EAAMrI,OAA4C,OAArBoB,EAAKiH,EAAMrI,MAAiB,GAAKoB,EAAKiH,EAAMrI,MACrF2D,UAAW9D,EAAM+D,QAAQkI,wBACzBH,WAAY,CAACV,IAAKA,EAAKtH,UAAW9D,EAAM+D,QAAQmI,gBAChD5L,KAAMkI,EAAMlI,KACZ0E,SAAU,SAAA1B,GAAC,OAAItD,EAAMa,YAAYoK,EAAWS,OAAQlD,EAAMrI,KAAMmD,EAAE2B,OAAOnE,QACzEgE,SAAU9E,EAAMyL,WAAWR,EAAWS,OAAQlD,EAAMrI,QAR/CoB,EAAKiH,EAAMrI,MAAQoB,EAAKiH,EAAMrI,MAAQ,KAavD,OAAO,cAACgM,GAAA,EAAD,CACHrI,UAAWgG,KAAMsC,KAAKpM,EAAM+D,QAAQsI,WAAYnB,GAAYlL,EAAM+D,QAAQuI,aAC1ElG,QAAS,SAAA9C,GACL6H,GAAY,GACZoB,OAAOC,aAAaC,QAAQ,kBAAmB,QAC/CF,OAAOG,YAAW,kBAAMtB,EAAIuB,SAAWvB,EAAIuB,QAAQC,UAAS,MAL7D,SAQF5B,KAsNMhE,gBAlVA,SAAAC,GAAK,MAAK,CACrB4F,YAAa,CACTC,WAAY,SACZC,WAAY,OACZnF,SAAU,MACVF,QAAS,WAEbsF,oBAAqB,CACjBnD,MAA8B,SAAvB5C,EAAMgG,QAAQ3M,KAAkB2G,EAAMgG,QAAQC,QAAQC,MAAQlG,EAAMgG,QAAQC,QAAQE,MAE/Ff,UAAW,CACPS,WAAY,SACZlF,SAAU,MACVF,QAAS,WAEb2F,eAAgB,CACZC,SAAU,OACVC,UAAW,uBAEfrB,eAAgB,CACZtE,SAAU,OAEdmE,YAAa,CACTnE,SAAU,OAEdqE,wBAAyB,CACrB/E,MAAO,QAEX8E,qBAAsB,CAClB9E,MAAO,QAEXoF,YAAa,CACTkB,QAAS,cAkTFxG,EAlNO,SAAAhH,GAClB,MAA0CiI,oBAAS,GAAnD,mBAAOwF,EAAP,KAAsBC,EAAtB,KACA,EAAgCzF,mBAA4D,UAAnDsE,OAAOC,aAAamB,QAAQ,oBAArE,mBAAOzC,EAAP,KAAiBC,EAAjB,KACA,EAAwClD,mBAAgE,SAAvDsE,OAAOC,aAAamB,QAAQ,wBAA7E,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8C5F,mBAAS,CACnDY,MAAM,EACN8B,OAAQ,OAFZ,mBAAOmD,EAAP,KAAwBC,EAAxB,KAIA,EAAwC9F,mBAAS,CAC7CY,MAAM,EACNtH,KAAM,KACNoJ,OAAQ,OAHZ,mBAAOqD,EAAP,KAAqBC,EAArB,KAMIC,EAAalO,EAAMmO,cAAcnO,EAAMyI,KAAMzI,EAAMoO,QAASpO,EAAMqO,OAEtE,OAAO,gCACH,gCACI,cAAC/C,GAAA,EAAD,CAAStI,MAAOqB,IAAKC,EAAE,YAAvB,SACI,cAAC6B,EAAA,EAAD,CAAYC,QAAS,SAAA9C,GAAC,OAAItD,EAAMsO,WAAhC,SACI,cAAC,KAAD,QAGR,cAAChD,GAAA,EAAD,CAAStI,MAAOqB,IAAKC,EAAE,sCAAvB,SACI,cAAC6B,EAAA,EAAD,CAAYC,QAAS,kBAAMsH,GAAiB,IAA5C,SACI,cAAC,KAAD,QAGR,cAACjJ,EAAA,EAAD,CACIE,QAAS,cAAC4J,GAAA,EAAD,CAAQxJ,QAASmG,EAAUlG,SAAU,SAAA1B,GAC1C6H,EAAY7H,EAAE2B,OAAOF,SACrBwH,OAAOC,aAAaC,QAAQ,kBAAmBnJ,EAAE2B,OAAOF,YAE5DL,MAAOL,IAAKC,EAAE,eAEjBtE,EAAMwO,wBAA0B,cAAClD,GAAA,EAAD,CAAStI,MAAOqB,IAAKC,EAAE,wBAAvB,SAC7B,cAAC6B,EAAA,EAAD,CACI0D,MAAO+D,EAAe,UAAY,UAClCxH,QAAS,WACLmG,OAAOC,aAAaC,QAAQ,sBAAuBmB,EAAe,QAAU,QAC5EC,GAAiBD,IAJzB,SAMI,cAAC,KAAD,WAIZ,qBAAK9J,UAAW9D,EAAM+D,QAAQsJ,eAA9B,SACI,eAACoB,EAAA,EAAD,CAAOC,KAAK,QACLC,cAAY,EACZjH,QAAQ,OAFf,UAII,cAACkH,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,WACK7O,EAAMuI,OAAOuG,QAAO,SAAAvN,GAAI,OAAKqM,IAAiBrM,EAAKwN,WAAa/O,EAAMgP,kBAAoBzN,EAAKyN,oBAAkBjM,KAAI,SAAAyF,GAClH,IAAIyG,GAAY,EACZC,GAAgB,EAChBC,GAAY,EACZC,GAAa,EACjB,IAAK,IAAIC,KAAKrP,EAAMyI,KAShB,GARIzI,EAAMyI,KAAK4G,GAAG7G,EAAMrI,OACpB8O,GAAY,EACZE,GAAY,IAEZF,GAAY,EACZG,GAAa,GAGbD,GAAaC,EAAY,CACzBF,GAAgB,EAChBD,GAAY,EACZ,MAIR,OAAO,eAAC9C,GAAA,EAAD,CAEHmD,MAAO,CAACpI,MAAsB,aAAfsB,EAAMlI,KAAsB,GAAKkI,EAAMtB,OACtDpD,UAAWgG,KAAMsC,KAAKpM,EAAM+D,QAAQ8I,YAAarE,EAAMuG,QAAU/O,EAAM+D,QAAQiJ,qBAC/EhK,MAAOwF,EAAM+G,QAAUlL,IAAKC,EAAEkE,EAAM+G,SAAW,KAJ5C,UAMa,aAAf/G,EAAMlI,KACH,cAACgL,GAAA,EAAD,CAAStI,MAAOqB,IAAKC,EAAE,cAAvB,SACI,cAACM,EAAA,EAAD,CACIsK,cAAeA,EACfnK,QAASkK,EACTjK,SAAU,SAAA1B,GACN,IAAIkM,EAAUzO,KAAKC,MAAMD,KAAKE,UAAUjB,EAAMyI,OAC9C+G,EAAQlO,SAAQ,SAAAC,GAAI,OAChBA,EAAKiH,EAAMrI,MAAQmD,EAAE2B,OAAOF,WAChC/E,EAAMyP,WAAWD,QAI3B,KACLhH,EAAMkH,OAAS,cAACC,GAAA,EAAD,CACZC,OAAQpH,EAAMrI,OAASH,EAAMoO,QAC7ByB,UAAW7P,EAAMqO,MACjBjI,QAAS,SAAA9C,GACL,IAAMwM,EAAQ9P,EAAMoO,UAAY5F,EAAMrI,MAAwB,QAAhBH,EAAMqO,MACpDrO,EAAM+P,cAAcvH,EAAMrI,KAAM2P,EAAQ,OAAS,QALzC,SAOdzL,IAAKC,EAAEkE,EAAMxF,SAA2BqB,IAAKC,EAAEkE,EAAMxF,SA1BlDwF,EAAMrI,SA6BnB,cAACgM,GAAA,EAAD,UACI,cAACb,GAAA,EAAD,CAAStI,MAAOqB,IAAKC,EAAE,cAAvB,SACI,8BACI,cAAC6B,EAAA,EAAD,CACIuI,KAAK,QACLtI,QAAS,SAAA9C,GAAC,OAAIyK,EAAmB,CAC7BlF,MAAM,EACN8B,OAAQ,kBAAM3K,EAAMyP,WAAW,QAEnC3K,UAAW9E,EAAMyI,KAAK7F,OAN1B,SAQI,cAAC,KAAD,iBAOxB,cAACoN,GAAA,EAAD,UAEQ9B,EAAWnL,KAAI,SAAAkI,GAAU,OACrB,eAAC4D,GAAA,EAAD,CAAUoB,OAAK,EAAf,UACKjQ,EAAMuI,OAAOuG,QAAO,SAAAvN,GAAI,OAAKqM,IAAiBrM,EAAKwN,WAAa/O,EAAMgP,kBAAoBzN,EAAKyN,oBAAkBjM,KAAI,SAAAyF,GAAK,OACvH,cAAC,GAAD,aACIyC,WAAYA,EACZzC,MAAOA,EACP0C,SAAUA,EACVS,MAAO3L,EAAM2L,MACbR,YAAaA,GAETnL,GADCwI,EAAMrI,SAInB,cAACgM,GAAA,EAAD,UACI,cAACb,GAAA,EAAD,CAAStI,MAAOqB,IAAKC,EAAE,UAAvB,SACI,8BACI,cAAC6B,EAAA,EAAD,CAAYuI,KAAK,QAAQtI,QAAS,SAAA9C,GAC9B,IAAI4M,EAAW3D,OAAO4D,eAAexC,QAAQ,wBACzCuC,GAAa,IAAIE,KAAS,IAAIA,KAAKF,GAAa,IAChDlQ,EAAMqQ,WAAWpF,EAAWS,QAGhCuC,EAAgB,CACZpF,MAAM,EACN8B,OAAQ,SAAA2F,GACAA,GACA/D,OAAO4D,eAAe1D,QAAQ,wBAAyB,IAAI2D,MAAQG,eAEvEvQ,EAAMqQ,WAAWpF,EAAWS,SAEhCnK,KAAM0J,EAAW1J,QAdzB,SAiBI,cAAC,KAAD,cAhCC0J,EAAWS,kBA2CpD,cAAC,GAAD,CACI7C,KAAM4E,EACNhD,KAAMzK,EAAMyP,WACZxG,QAAS,kBAAMyE,GAAiB,IAChCjF,KAAMzI,EAAMyI,KACZF,OAAQvI,EAAMuI,SAElB,cAAC,GAAD,CACIM,KAAMiF,EAAgBjF,KACtB8B,OAAQmD,EAAgBnD,OACxB1B,QAAS,kBAAM8E,EAAmB,CAC9BlF,MAAM,EACN8B,OAAQ,UAGhB,cAAC,GAAD,CACI9B,KAAMmF,EAAanF,KACnB8B,OAAQqD,EAAarD,OACrB1B,QAAS,kBAAMgF,EAAgB,CAC3BpF,MAAM,EACN8B,OAAQ,KACRpJ,KAAM,QAEVA,KAAMyM,EAAazM,aCzNhBiP,G,kDAjIX,WAAYxQ,GAAQ,IAAD,8BACf,cAAMA,IA4BVa,YAAc,SAACwJ,EAAOlK,EAAMW,GACxB,IAAI2H,EAAO1H,KAAKC,MAAMD,KAAKE,UAAU,EAAKjB,MAAMI,OAAO,EAAKqQ,eAC5DhI,EAAK4B,GAAOlK,GAAQW,EACpB,EAAKd,MAAMgF,SAAS,EAAKyL,YAAahI,IAhCvB,EAmCnB6F,QAAU,WACN,IAAI7F,EAAO1H,KAAKC,MAAMD,KAAKE,UAAU,EAAKjB,MAAMI,OAAO,EAAKqQ,eACxDC,EAAU,GACd,EAAKC,YAAYrP,SAAQ,SAAAkH,GAAK,OAAIkI,EAAQlI,EAAMrI,MAAQ,MACxDsI,EAAKH,KAAKoI,GACV,EAAK1Q,MAAMgF,SAAS,EAAKyL,YAAahI,IAxCvB,EA2CnB4H,WAAa,SAAAhG,GACT,IAAI5B,EAAO1H,KAAKC,MAAMD,KAAKE,UAAU,EAAKjB,MAAMI,OAAO,EAAKqQ,eAC5DhI,EAAKmI,OAAOvG,EAAO,GACnB,EAAKrK,MAAMgF,SAAS,EAAKyL,YAAahI,IA9CvB,EAiDnBgH,WAAa,SAAAhH,GACT,EAAKzI,MAAMgF,SAAS,EAAKyL,YAAahI,IAlDvB,EAqDnBgD,WAAa,SAACpB,EAAOlK,GACjB,OAAO,GAtDQ,EAyDnBgO,cAAgB,SAAC1F,EAAM2F,EAASC,GAC5B5F,EAAOA,GAAQ,EAAKzI,MAAMI,OAAO,EAAKqQ,aACtCrC,EAAUA,GAAW,EAAKvM,MAAMuM,QAChCC,EAAQA,GAAS,EAAKxM,MAAMwM,MAC5B,IAAIH,EAAa,GACjBzF,EAAKnH,SAAQ,SAACC,EAAM8I,GAAW6D,EAAW7D,GAAS,CAAC9I,OAAMmK,OAAQrB,MAClE,IAAM7B,EAAQ,EAAKD,OAAOpF,MAAK,SAAA5B,GAAI,OAAIA,EAAKpB,OAASiO,KAqBrD,OAnBAF,EAAW2C,MAAK,SAACC,EAAaC,GAC1B,IAAIC,EACAC,EAcJ,MAbgB,aAAZ7C,GACA4C,EAAS1G,SAASwG,EAAYvP,KAAK2P,SAAU,KAAO,GAAM5G,SAASwG,EAAYvP,KAAKC,SAAU,IAC9FyP,EAAS3G,SAASyG,EAAYxP,KAAK2P,SAAU,KAAO,GAAM5G,SAASyG,EAAYxP,KAAKC,SAAU,KAC3E,WAAZ4M,GACP4C,EAAQF,EAAY1C,GACpB6C,EAAQF,EAAY3C,IACb5F,GAAwB,WAAfA,EAAMlI,MACtB0Q,EAAQ1G,SAASwG,EAAYvP,KAAK6M,GAAU,IAC5C6C,EAAQ3G,SAASyG,EAAYxP,KAAK6M,GAAU,MAE5C4C,EAAQF,EAAYvP,KAAK6M,GACzB6C,EAAQF,EAAYxP,KAAK6M,KAEX,QAAVC,EAAkB2C,EAAQC,EAAQD,EAAQC,GAAS,GAAK,KAG7D/C,GAlFP,EAAKuC,YAAc,GACnB,EAAK5O,MAAQ,CACTwM,MAAO9B,OAAOC,aAAamB,QAAQ,iBAAmB,MACtDS,QAAS7B,OAAOC,aAAamB,QAAQ,mBAAqB,YAL/C,E,qDASnB,WACI,IAAKpB,OAAOC,aAAamB,QAAQ,kBAAmB,CAChD1L,KAAKsG,OAAStG,KAAKsG,QAAUtG,KAAK0O,YAClC,IACMvC,IADqBnM,KAAKsG,OAAOpF,MAAK,SAAA5B,GAAI,MAAkB,aAAdA,EAAKpB,QACtB,WAAa,WAE5CiO,IAAYnM,KAAKJ,MAAMuM,SACvBnM,KAAKmB,SAAS,CAACgL,e,sCAK3B,WACI,OAAO,I,uBAGX,WACI,OAAO,O,oBA6DX,WAAU,IAAD,OAGL,OAFAnM,KAAKsG,OAAStG,KAAKsG,QAAUtG,KAAK0O,YAE3B,cAAC9M,EAAA,EAAD,UACH,cAAC,GAAD,CACI0E,OAAQtG,KAAKsG,OACbE,KAAMxG,KAAKjC,MAAMI,OAAO6B,KAAKwO,aAC7BtC,cAAelM,KAAKkM,cACpBK,uBAAwBvM,KAAKkP,2BAC7BtQ,YAAaoB,KAAKpB,YAClByN,QAASrM,KAAKqM,QACd+B,WAAYpO,KAAKoO,WACjBZ,WAAYxN,KAAKwN,WACjBhE,WAAYxJ,KAAKwJ,WACjBuD,gBAAiB/M,KAAKjC,MAAMgP,gBAC5BrD,MAAO1J,KAAKjC,MAAM2L,MAClB0C,MAAOpM,KAAKJ,MAAMwM,MAClBD,QAASnM,KAAKJ,MAAMuM,QACpB2B,cAAe,SAAC3B,EAASC,GACrB,EAAKjL,SAAS,CAACgL,UAASC,UACxB9B,OAAOC,aAAaC,QAAQ,iBAAkB2B,GAC9C7B,OAAOC,aAAaC,QAAQ,eAAgB4B,Y,GA7GpCtH,aCCtBqK,G,4MACFX,YAAc,Y,EA4BdnC,QAAU,WACN,IAAI7F,EAAO1H,KAAKC,MAAMD,KAAKE,UAAU,EAAKjB,MAAMI,OAAO,EAAKqQ,eACxDC,EAAU,GAEd,GADA,EAAKC,YAAYrP,SAAQ,SAAAkH,GAAK,OAAIkI,EAAQlI,EAAMrI,MAAQ,MACpDsI,EAAK7F,OAAQ,CACb,IAAIsL,EAAa,EAAKC,gBAClBkD,EAAWnD,EAAWA,EAAWtL,OAAS,GAAGrB,KACjDmP,EAAQlP,SAAW8I,SAAS+G,EAAS7P,SAAU,KAAO6P,EAASC,IAAMhH,SAAS+G,EAASC,IAAK,IAAM,GAClGZ,EAAQQ,SAAWG,EAASH,SAC5BR,EAAQpQ,KAAO+Q,EAAS/Q,KACxBoQ,EAAQY,IAAMD,EAASC,IACvBZ,EAAQa,OAASF,EAASE,OAC1Bb,EAAQc,OAASH,EAASG,OAC1Bd,EAAQe,QAAUJ,EAASI,QAC3Bf,EAAQgB,KAAOL,EAASK,KACxBhB,EAAQiB,GAAKN,EAASM,GACtBjB,EAAQkB,QAAUP,EAASO,aAE3BlB,EAAQgB,KAAO,QACfhB,EAAQa,OAAS,EACjBb,EAAQc,OAAS,EACjBd,EAAQlP,SAAW,EAAKxB,MAAMI,OAAOC,OAAOE,YAAc,MAAQ,EAEtEkI,EAAKH,KAAKoI,GACV,EAAK1Q,MAAMgF,SAAS,EAAKyL,YAAahI,I,EAG1CgD,WAAa,SAACpB,EAAOlK,GACjB,MAAa,QAATA,IACK,CAAC,SAAU,YAAYS,SAAS,EAAKZ,MAAMI,OAAO,EAAKqQ,aAAapG,GAAO/J,O,EAOxFO,YAAc,SAACwJ,EAAOlK,EAAMW,GACxB,IAAI2H,EAAO1H,KAAKC,MAAMD,KAAKE,UAAU,EAAKjB,MAAMI,OAAO,EAAKqQ,eAC5DhI,EAAK4B,GAAOlK,GAAQW,EACP,SAATX,IACI,CAAC,GAAI,WAAY,WAAY,UAAW,UAAW,UAAW,UAAW,SAAU,UAAUS,SAASE,KACtG2H,EAAK4B,GAAOiH,IAAM,GAElB,CAAC,WAAY,WAAY,WAAY,WAAY,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,SAAU,YAAY1Q,SAASE,KACxK2H,EAAK4B,GAAOiH,IAAM,GAElB,CAAC,WAAY,WAAY,WAAY,YAAY1Q,SAASE,KAC1D2H,EAAK4B,GAAOiH,IAAM,IAG1B,EAAKtR,MAAMgF,SAAS,EAAKyL,YAAahI,I,+CA5E1C,WACI,IAAIuC,EAAS,CACT,CAAC7K,KAAM,WAAY6C,MAAO,UAAW1C,KAAM,SAAUoP,QAAQ,EAAMxI,MAAO,IAC1E,CAAC/G,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,OAAQoP,QAAQ,GACpD,CAACvP,KAAM,cAAe6C,MAAO,cAAe1C,KAAM,OAAQoP,QAAQ,GAClE,CAACvP,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,OAAQ4G,MAAO,IACnD,CAAC/G,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,SAAUoF,QAASmM,EAAOnC,QAAQ,GACtE,CAACvP,KAAM,MAAO6C,MAAO,SAAU1C,KAAM,OAAQ4G,MAAO,IACpD,CAAC/G,KAAM,SAAU6C,MAAO,SAAU1C,KAAM,OAAQ4G,MAAO,GAAI6H,QAAQ,GACnE,CAAC5O,KAAM,SAAU6C,MAAO,SAAU1C,KAAM,OAAQ4G,MAAO,GAAI6H,QAAQ,GACnE,CAAC5O,KAAM,UAAW6C,MAAO,UAAW1C,KAAM,OAAQ0O,iBAAiB,EAAMD,QAAQ,GACjF,CAAC5O,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,SAAUoF,QAASoM,EAAOpC,QAAQ,GACtE,CAACvP,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,SACpC,CAACH,KAAM,KAAM6C,MAAO,KAAM1C,KAAM,WAAYiP,QAAS,gBACrD,CAACpP,KAAM,UAAW6C,MAAO,KAAM1C,KAAM,WAAYiP,QAAS,qCAAsCR,QAAQ,EAAMC,iBAAiB,IASnI,OANI/M,KAAKjC,MAAMI,OAAOC,OAAOa,eACzB8J,EAAO4F,OAAO,EAAG,EACb,CAACzQ,KAAM,WAAY6C,MAAO,WAAY1C,KAAM,SAAUoP,QAAQ,EAAMxI,MAAO,KAI5E8D,M,GA1BcwF,IAmF7BY,GAAeW,UAAY,CACvBvO,OAAQwO,IAAUC,OAAOC,WACzB9R,OAAQ4R,IAAUC,OAAOC,WACzB7P,SAAU2P,IAAUG,OAAOD,WAC3B9P,YAAa4P,IAAUI,OAAOF,WAC9BG,QAASL,IAAUM,KACnBC,OAAQP,IAAUM,KAClBtN,SAAUgN,IAAUM,KACpBE,QAASR,IAAUS,KACnBvQ,OAAQ8P,IAAUC,OAAOC,WACzBvG,MAAOqG,IAAUC,QAGNb,UChGTsB,G,4MACFjC,YAAc,c,EAiCdnC,QAAU,WACN,IAAI7F,EAAO1H,KAAKC,MAAMD,KAAKE,UAAU,EAAKjB,MAAMI,OAAO,EAAKqQ,eACxDC,EAAU,GAEd,GADA,EAAKC,YAAYrP,SAAQ,SAAAkH,GAAK,OAAIkI,EAAQlI,EAAMrI,MAAQ,MACpDsI,EAAK7F,OAAQ,CACb,IAAIsL,EAAa,EAAKC,gBAClBkD,EAAWnD,EAAWA,EAAWtL,OAAS,GAAGrB,KACjDmP,EAAQlP,SAAW8I,SAAS+G,EAAS7P,SAAU,KAAO6P,EAASC,IAAMhH,SAAS+G,EAASC,IAAK,IAAM,GAClGZ,EAAQQ,SAAWG,EAASH,SAC5BR,EAAQpQ,KAAO+Q,EAAS/Q,KACxBoQ,EAAQY,IAAOD,EAASC,IAAMhH,SAAS+G,EAASC,KAAO,EACvDZ,EAAQa,OAASF,EAASE,OAC1Bb,EAAQc,OAASH,EAASG,OAC1Bd,EAAQe,QAAUJ,EAASI,QAC3Bf,EAAQgB,KAAOL,EAASK,KACxBhB,EAAQiC,KAAOtB,EAASsB,KACxBjC,EAAQkC,GAAKvB,EAASuB,GACtBlC,EAAQiB,GAAKN,EAASM,GACtBjB,EAAQkB,QAAUP,EAASO,aAE3BlB,EAAQgB,KAAO,QACfhB,EAAQa,OAAS,EACjBb,EAAQc,OAAS,EACjBd,EAAQlP,SAAW,EAAKxB,MAAMI,OAAOC,OAAOE,YAAc,MAAQ,EAEtEkI,EAAKH,KAAKoI,GACV,EAAK1Q,MAAMgF,SAAS,EAAKyL,YAAahI,I,EAG1CgD,WAAa,SAACpB,EAAOlK,GACjB,MAAgB,QAATA,IACF,CAAC,SAAU,YAAYS,SAAS,EAAKZ,MAAMI,OAAO,EAAKqQ,aAAapG,GAAO/J,O,EAGpFO,YAAc,SAACwJ,EAAOlK,EAAMW,GACxB,IAAI2H,EAAO1H,KAAKC,MAAMD,KAAKE,UAAU,EAAKjB,MAAMI,OAAO,EAAKqQ,eAE5DhI,EAAK4B,GAAOlK,GAAQW,EAEP,SAATX,IACI,CAAC,GAAI,WAAY,WAAY,UAAW,UAAW,UAAW,UAAW,SAAU,UAAUS,SAASE,GACtG2H,EAAK4B,GAAOiH,IAAM,EAElB,CAAC,WAAY,WAAY,WAAY,WAAY,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,SAAU,YAAY1Q,SAASE,GACxK2H,EAAK4B,GAAOiH,IAAM,EAElB,CAAC,WAAY,WAAY,WAAY,YAAY1Q,SAASE,KAC1D2H,EAAK4B,GAAOiH,IAAM,IAI1B,EAAKtR,MAAMgF,SAAS,EAAKyL,YAAahI,I,+CAlF1C,WAII,IAAIuC,EAAS,CACT,CAAC7K,KAAM,WAAY6C,MAAO,UAAW1C,KAAM,SAAUoP,QAAQ,EAAMxI,MAAO,IAC1E,CAAC/G,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,OAAQoP,QAAQ,GACpD,CAACvP,KAAM,cAAe6C,MAAO,cAAe1C,KAAM,OAAQoP,QAAQ,GAClE,CAACvP,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,OAAQ4G,MAAO,IACnD,CAAC/G,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,SAAUoF,QAASmM,EAAOnC,QAAQ,GACtE,CAACvP,KAAM,MAAO6C,MAAO,SAAU1C,KAAM,OAAQ4G,MAAO,IACpD,CAAC/G,KAAM,SAAU6C,MAAO,SAAU1C,KAAM,OAAQ4G,MAAO,GAAI6H,QAAQ,GACnE,CAAC5O,KAAM,SAAU6C,MAAO,SAAU1C,KAAM,OAAQ4G,MAAO,GAAI6H,QAAQ,GACnE,CAAC5O,KAAM,UAAW6C,MAAO,UAAW1C,KAAM,OAAQyO,QAAQ,EAAMC,iBAAiB,GACjF,CAAC7O,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,SAAUoF,QAASoM,EAAOpC,QAAQ,GACtE,CAACvP,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,SACpC,CAACH,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,WAAYiP,QAAS,gCACzD,CAACpP,KAAM,KAAM6C,MAAO,KAAM1C,KAAM,WAAYiP,QAAS,wCAAoCR,QAAQ,GACjG,CAAC5O,KAAM,KAAM6C,MAAO,KAAM1C,KAAM,WAAYiP,QAAS,gBACrD,CAACpP,KAAM,UAAW6C,MAAO,KAAM1C,KAAM,WAAYiP,QAAS,qCAAsCR,QAAQ,EAAMC,iBAAiB,IASnI,OANI/M,KAAKjC,MAAMI,OAAOC,OAAOa,eACzB8J,EAAO4F,OAAO,EAAG,EACb,CAACzQ,KAAM,WAAY6C,MAAO,WAAY1C,KAAM,SAAUoP,QAAQ,EAAMxI,MAAO,KAI5E8D,M,GA/BgBwF,IAyF/BkC,GAAiBX,UAAY,CACzBvO,OAAQwO,IAAUC,OAAOC,WACzB9R,OAAQ4R,IAAUC,OAAOC,WACzB7P,SAAU2P,IAAUG,OAAOD,WAC3B9P,YAAa4P,IAAUI,OAAOF,WAC9BG,QAASL,IAAUM,KACnBC,OAAQP,IAAUM,KAClBtN,SAAUgN,IAAUM,KACpBE,QAASR,IAAUS,KACnBvQ,OAAQ8P,IAAUC,OAAOC,WACzBvG,MAAOqG,IAAUC,QAGNS,UCvGTG,G,4MACFpC,YAAc,Y,EA2BdnC,QAAU,WACN,IAAI7F,EAAO1H,KAAKC,MAAMD,KAAKE,UAAU,EAAKjB,MAAMI,OAAO,EAAKqQ,eACxDC,EAAU,GAEd,GADA,EAAKC,YAAYrP,SAAQ,SAAAkH,GAAK,OAAIkI,EAAQlI,EAAMrI,MAAQ,MACpDsI,EAAK7F,OAAQ,CACb,IAAIsL,EAAa,EAAKC,gBAClBkD,EAAWnD,EAAWA,EAAWtL,OAAS,GAAGrB,KACjDmP,EAAQlP,SAAW8I,SAAS+G,EAAS7P,SAAU,IAAM,EACrDkP,EAAQQ,SAAWG,EAASH,SAC5BR,EAAQe,QAAUJ,EAASI,QAC3Bf,EAAQgB,KAAOL,EAASK,KACxBhB,EAAQiB,GAAKN,EAASM,GACtBjB,EAAQkB,QAAUP,EAASO,aAE3BlB,EAAQgB,KAAO,QACfhB,EAAQlP,SAAW,EAAKxB,MAAMI,OAAOC,OAAOE,YAAc,MAAQ,EAEtEkI,EAAKH,KAAKoI,GACV,EAAK1Q,MAAMgF,SAAS,EAAKyL,YAAahI,I,+CA3C1C,WACI,IAAIuC,EAAS,CACT,CAAC7K,KAAM,WAAY6C,MAAO,UAAW1C,KAAM,SAAUoP,QAAQ,EAAMxI,MAAO,IAC1E,CAAC/G,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,OAAQoP,QAAQ,GACpD,CAACvP,KAAM,cAAe6C,MAAO,cAAe1C,KAAM,OAAQoP,QAAQ,GAClE,CAACvP,KAAM,UAAW6C,MAAO,UAAW1C,KAAM,OAAQyO,QAAQ,EAAMC,iBAAiB,GACjF,CAAC7O,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,SAAUoF,QAASoM,EAAOpC,QAAQ,GACtE,CAACvP,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,SACpC,CAACH,KAAM,KAAM6C,MAAO,KAAM1C,KAAM,WAAYiP,QAAS,gBACrD,CAACpP,KAAM,UAAW6C,MAAO,KAAM1C,KAAM,WAAYiP,QAAS,qCAAsCR,QAAQ,EAAMC,iBAAiB,IASnI,OANI/M,KAAKjC,MAAMI,OAAOC,OAAOa,eACzB8J,EAAO4F,OAAO,EAAG,EACb,CAACzQ,KAAM,WAAY6C,MAAO,WAAY1C,KAAM,SAAUoP,QAAQ,EAAMxI,MAAO,KAI5E8D,I,sCAGX,WACI,OAA0C,IAAnC/I,KAAKjC,MAAMI,OAAOC,OAAOG,OAAkD,MAAnCyB,KAAKjC,MAAMI,OAAOC,OAAOG,U,GAzBnDgQ,IAkD7BqC,GAAed,UAAY,CACvBvO,OAAQwO,IAAUC,OAAOC,WACzB9R,OAAQ4R,IAAUC,OAAOC,WACzB7P,SAAU2P,IAAUG,OAAOD,WAC3B9P,YAAa4P,IAAUI,OAAOF,WAC9BG,QAASL,IAAUM,KACnBC,OAAQP,IAAUM,KAClBtN,SAAUgN,IAAUM,KACpBE,QAASR,IAAUS,KACnBvQ,OAAQ8P,IAAUC,OAAOC,WACzBvG,MAAOqG,IAAUC,QAGNY,UC/DTC,G,4MACFrC,YAAc,Q,EAyBdnC,QAAU,WACN,IAAI7F,EAAO1H,KAAKC,MAAMD,KAAKE,UAAU,EAAKjB,MAAMI,OAAO,EAAKqQ,eACxDC,EAAU,GAEd,GADA,EAAKC,YAAYrP,SAAQ,SAAAkH,GAAK,OAAIkI,EAAQlI,EAAMrI,MAAQ,MACpDsI,EAAK7F,OAAQ,CACb,IAAIsL,EAAa,EAAKC,gBAClBkD,EAAWnD,EAAWA,EAAWtL,OAAS,GAAGrB,KACjDmP,EAAQlP,SAAW8I,SAAS+G,EAAS7P,SAAU,IAAM,EACrDkP,EAAQQ,SAAWG,EAASH,SAC5BR,EAAQe,QAAUJ,EAASI,QAC3Bf,EAAQgB,KAAOL,EAASK,KACxBhB,EAAQiC,KAAOtB,EAASsB,KACxBjC,EAAQkC,GAAKvB,EAASuB,GACtBlC,EAAQiB,GAAKN,EAASM,GACtBjB,EAAQkB,QAAUP,EAASO,aAE3BlB,EAAQgB,KAAO,QACfhB,EAAQlP,SAAW,EAAKxB,MAAMI,OAAOC,OAAOE,YAAc,EAAI,EAElEkI,EAAKH,KAAKoI,GACV,EAAK1Q,MAAMgF,SAAS,EAAKyL,YAAahI,I,+CA3C1C,WACI,IAAIuC,EAAS,CACT,CAAC7K,KAAM,WAAY6C,MAAO,UAAW1C,KAAM,SAAUoP,QAAQ,EAAMxI,MAAO,IAC1E,CAAC/G,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,OAAQoP,QAAQ,GACpD,CAACvP,KAAM,cAAe6C,MAAO,cAAe1C,KAAM,OAAQoP,QAAQ,GAClE,CAACvP,KAAM,UAAW6C,MAAO,UAAW1C,KAAM,OAAQyO,QAAQ,EAAMC,iBAAiB,GACjF,CAAC7O,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,SAAUoF,QAASoM,EAAOpC,QAAQ,GACtE,CAACvP,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,SACpC,CAACH,KAAM,OAAQ6C,MAAO,OAAQ1C,KAAM,YACpC,CAACH,KAAM,KAAM6C,MAAO,KAAM1C,KAAM,WAAYyO,QAAQ,GACpD,CAAC5O,KAAM,KAAM6C,MAAO,KAAM1C,KAAM,YAChC,CAACH,KAAM,UAAW6C,MAAO,KAAM1C,KAAM,WAAYiP,QAAS,qCAAsCR,QAAQ,EAAMC,iBAAiB,IASnI,OANI/M,KAAKjC,MAAMI,OAAOC,OAAOa,eACzB8J,EAAO4F,OAAO,EAAG,EACb,CAACzQ,KAAM,WAAY6C,MAAO,WAAY1C,KAAM,SAAUoP,QAAQ,EAAMxI,MAAO,KAI5E8D,M,GAvBKwF,IAkDpBsC,GAAMf,UAAY,CACdvO,OAAQwO,IAAUC,OAAOC,WACzB9R,OAAQ4R,IAAUC,OAAOC,WACzB7P,SAAU2P,IAAUG,OAAOD,WAC3B9P,YAAa4P,IAAUI,OAAOF,WAC9BG,QAASL,IAAUM,KACnBC,OAAQP,IAAUM,KAClBtN,SAAUgN,IAAUM,KACpBE,QAASR,IAAUS,KACnBvQ,OAAQ8P,IAAUC,OAAOC,WACzBvG,MAAOqG,IAAUC,QAGNa,UC7BTC,GAAO,CACT,CACI5S,KAAM,UACN6C,MAAO,UACPgQ,UAAWC,GAEf,CACI9S,KAAM,kBACN6C,MAAO,kBACPgQ,UAAWE,GACXC,KAAM,cAAC,IAAD,CAAY7D,MAAO,CAACpI,MAAO,GAAIY,OAAQ,GAAIsL,YAAa,EAAGjM,QAAS,kBAC1EoI,QAAS,6BAEb,CACIpP,KAAM,QACN6C,MAAO,QACPgQ,UAAWK,GACXF,KAAM,cAAC,IAAD,CAAY7D,MAAO,CAACpI,MAAO,GAAIY,OAAQ,GAAIsL,YAAa,EAAGjM,QAAS,kBAC1EoI,QAAS,6BAEb,CACIpP,KAAM,kBACN6C,MAAO,kBACPgQ,UAAWM,GACXH,KAAM,cAAC,IAAD,CAAY7D,MAAO,CAACpI,MAAO,GAAIY,OAAQ,GAAIsL,YAAa,EAAGjM,QAAS,kBAC1EoI,QAAS,gDAEb,CACIpP,KAAM,oBACN6C,MAAO,oBACPgQ,UAAWO,GACXJ,KAAM,cAAC,IAAD,CAAY7D,MAAO,CAACpI,MAAO,GAAIY,OAAQ,GAAIsL,YAAa,EAAGjM,QAAS,kBAC1EoI,QAAS,6CAIXiE,G,kDACF,WAAYxT,GAAQ,IAAD,sBAEXuM,OAAOkH,IAA+B,SAAzBlH,OAAOmH,SAASC,OAC7BhR,QAAQiR,IAAI,mBACLrH,OAAOkH,GACdlH,OAAOkH,GAAK,IAAIlH,OAAOsH,cAE3B,IAAMC,EAAa,eAAO9T,GAPX,OAQf8T,EAAcC,gBAAkB,CAAC,QAEjCD,EAAcE,aAAe,CACzB,GAAMC,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,QAASA,EAAQ,OAGrB,cAAMjU,EAAO8T,IACRjS,MAAMqS,YAAa,EACxB,EAAKrS,MAAM8J,MAAQ,KAzBJ,E,qDA4BnB,WAAqB,IAAD,OAChB,0EACA1J,KAAKC,OAAOiS,SAAS,SAChB7R,MAAK,SAAAqJ,GAAK,OACP,EAAKvI,SAAS,CAAC8Q,YAAY,EAAMvI,e,4BAG7C,WACI,IAAMyI,EAAcnS,KAAKJ,MAAMuS,YAC/B,OAAKA,EAGMrB,GAAKsB,WAAU,SAAAhO,GAAG,OAAIA,EAAIlG,OAASiU,KAFnC,I,oBAMf,WAAU,IAAD,OACL,OAAKnS,KAAKJ,MAAMyS,QAAWrS,KAAKJ,MAAMqS,WAM/B,cAAC,IAAD,CAAkBjN,MAAOhF,KAAKJ,MAAMoF,MAApC,SACH,cAAC,IAAD,UACI,sBAAKnD,UAAU,MAAMwL,MAAO,CAACiF,WAAYtS,KAAKJ,MAAMoF,MAAMgG,QAAQsH,WAAWC,QAAS3K,MAAO5H,KAAKJ,MAAMoF,MAAMgG,QAAQwH,KAAKvH,SAA3H,UACI,cAACwH,EAAA,EAAD,CAAQxO,SAAS,SAAjB,SACI,cAACyO,EAAA,EAAD,CACI7T,MAAOmB,KAAK2S,iBACZ5P,SAAU,SAAC1B,EAAG+G,GAAJ,OAAc,EAAKwK,UAAU9B,GAAK1I,GAAOlK,KAAMkK,IACzDnG,QAAQ,aAAa4Q,cAAc,OAHvC,SAIK/B,GAAKhQ,KAAI,SAAAsD,GACN,OAAO,cAAC0O,EAAA,EAAD,CACHrQ,MAAO2B,EAAI8M,KAAO,qCAAG9M,EAAI8M,KAAM9O,IAAKC,EAAE+B,EAAIrD,UAAaqB,IAAKC,EAAE+B,EAAIrD,OAClEgS,YAAW3O,EAAIlG,KAEf6C,MAAOqD,EAAIkJ,QAAUlL,IAAKC,EAAE+B,EAAIkJ,cAAW7G,GADtCrC,EAAIlG,aAMzB,qBAAK2D,UAAW7B,KAAKgT,SAAWhT,KAAKjC,MAAM+D,QAAQmR,iBAAmBjT,KAAKjC,MAAM+D,QAAQoR,WAAzF,SACKpC,GAAKhQ,KAAI,SAACsD,EAAKgE,GACZ,IAAM+K,EAAe/O,EAAI2M,UACzB,GAAI,EAAKnR,MAAMuS,aACX,GAAI,EAAKvS,MAAMuS,cAAgB/N,EAAIlG,KAC/B,OAAO,UAGX,GAAc,IAAVkK,EACA,OAAO,KAGf,OAAO,cAAC+K,EAAD,CAEHpG,gBAAoD,MAAnC,EAAKnN,MAAMzB,OAAOC,OAAOG,OAAoD,IAAnC,EAAKqB,MAAMzB,OAAOC,OAAOG,MACpFgD,OAAQ,EAAKA,OACbtB,OAAQ,EAAKA,OACb9B,OAAQ,EAAKyB,MAAMzB,OACnBiS,QAAS,SAAAoC,GAAI,OAAI,EAAKrR,SAAS,CAACiS,WAAYZ,GAAiB,IAATA,GAA+B,kBAATA,EAAsCA,EAAlBA,EAAK9L,cACnG4J,OAAQ,SAAAnS,GAAM,OAAI,EAAKkV,aAAalV,IACpCiC,SAAU,EAAKA,SACfD,YAAa,EAAKA,YAClBoQ,QAAS,EAAK3Q,MAAM2Q,QACpBxN,SAAU,SAACuQ,EAAMzU,EAAO0U,GAAd,OAAqB,EAAKC,kBAAkBF,EAAMzU,EAAO0U,IACnE5T,aAAc,SAACd,GAAD,OAAW,EAAKsC,SAAS,CAAChD,OAAQU,EAAO0R,QAAS,EAAKkD,aAAa5U,MAClF6K,MAAO,EAAK9J,MAAM8J,OAZbtF,EAAIlG,WAgBpB8B,KAAK0T,cACL1T,KAAK2T,gCArDP,cAAC,IAAD,CAAkB3O,MAAOhF,KAAKJ,MAAMoF,MAApC,SACH,cAAC,IAAD,CAAQA,MAAOhF,KAAKJ,MAAMgU,kB,GAhDxBC,KA2GH9O,gBAjKA,SAAAC,GAAK,MAAK,CACrB8O,KAAM,GACNZ,WAAY,CACRzN,QAAS,GACTI,OAAQ,kCACRwF,SAAU,QAEd4H,iBAAkB,CACdxN,QAAS,GACTI,OAAQ,yCACRwF,SAAU,QAEdjH,IAAK,CACDa,MAAO,OACP8O,UAAW,WAmJJhP,CAAmBwM,IC3KdyC,QACW,cAA7B1J,OAAOmH,SAASwC,UAEe,UAA7B3J,OAAOmH,SAASwC,UAEhB3J,OAAOmH,SAASwC,SAASC,MACvB,2D,mCCNN5J,OAAOnK,YAAc,SACrB,IAAIgU,GAAYtM,KAAMuM,eAEtB1T,QAAQiR,IAAR,mBAAwBrH,OAAOnK,YAA/B,YAA8CkU,KAA9C,yBAAsEF,GAAtE,MAEA,SAASG,IACL,OAAOC,IAASC,OACZ,cAAC,IAAD,CAAkBxP,MAAOA,KAAMmP,IAA/B,SACI,cAAC,GAAD,CACIM,cAAe,SAAAC,GACXP,GAAYO,EACZJ,SAIZK,SAASC,eAAe,SAchCN,GDwFM,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAM1U,MAAK,SAAA2U,GACjCA,EAAaC,iB","file":"static/js/main.9976f9f6.chunk.js","sourcesContent":["import {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport connectionInputs from '../data/optionsConnection';\r\nimport generalInputs from '../data/optionsGeneral';\r\n\r\nconst styles = theme => ({\r\n    optionsSelect: {\r\n        width: 280\r\n    },\r\n    optionsTextfield: {\r\n        width: 280\r\n    },\r\n    optionContainer: {\r\n        display: 'flex',\r\n        alignItems: 'start',\r\n        paddingTop: 4,\r\n        paddingBottom: 4\r\n    },\r\n    helperText: {\r\n        marginTop: -8,\r\n        marginLeft: 32,\r\n        marginBottom: 10\r\n    },\r\n    optionsContainer: {\r\n        width: `calc(100% - ${theme.spacing(4)}px)`,\r\n        padding: theme.spacing(2),\r\n        display: 'inline-block',\r\n        textAlign: 'left'\r\n    },\r\n    optionsGrid: {\r\n        textAlign: 'center',\r\n        padding: theme.spacing(2),\r\n    },\r\n    header: {\r\n        fontSize: 24,\r\n    }\r\n});\r\n\r\nclass Options extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ports: null,\r\n            customPort: false,\r\n            ips: null,\r\n        };\r\n    }\r\n\r\n    readPorts() {\r\n        return this.props.socket.getState(`system.adapter.${this.props.adapterName}.${this.props.instance}.alive`)\r\n            .then(state => {\r\n                if (state && state.val) {\r\n                    return this.props.socket.sendTo(this.props.adapterName + '.' + this.props.instance, 'listUart', null)\r\n                        .then(list => {\r\n                            if (list && list.error) {\r\n                                console.error('Cannot read ports: ' + list.error);\r\n                            } else\r\n                            if (list && list.length === 1 && list[0] && list[0].path === 'Not available') {\r\n                                console.warn('Cannot read ports');\r\n                            } else {\r\n                                const ports = list.map(item => ({value: item.path, title: item.path + (item.manufacturer ? ' [' + item.manufacturer + ']' : '')}));\r\n                                const customPort = this.props.native.params.comName && !ports.find(item => item.value === this.props.native.params.comName);\r\n\r\n                                this.setState({ports, customPort});\r\n                            }\r\n                        })\r\n                        .catch(e => console.error('Cannot read ports: ' + e));\r\n                }\r\n            })\r\n            .catch(e => console.error('Cannot read alive: ' + e));\r\n    }\r\n\r\n    readIPs() {\r\n        return this.props.socket.getIpAddresses(this.props.common.host)\r\n            .then(ips => {\r\n                ips = ips || [];\r\n                ips = ips.map(ip => ({value: ip, title: ip}));\r\n                ips.unshift({value: '0.0.0.0', title: 'Listen on all IPs'});\r\n                ips.unshift({value: '127.0.0.1', title: '127.0.0.1 (Localhost)'});\r\n                this.setState({ips});\r\n            })\r\n            .catch(e => console.error('Cannot read IP addresses: ' + e));\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.native.params.type === 'serial') {\r\n            this.readPorts();\r\n        }\r\n        if (this.props.native.params.type !== 'serial' && (this.props.native.params.slave === '1' || this.props.native.params.slave === 1)) {\r\n            this.readIPs();\r\n        }\r\n    }\r\n\r\n    inputDisabled = input => {\r\n        if (input.name === 'slave' && this.props.native.params.type !== 'tcp') {\r\n            return true;\r\n        } else\r\n        if (input.name === 'directAddresses' && !this.props.native.params.showAliases) {\r\n            return true;\r\n        } else\r\n        if (input.name === 'multiDeviceId' && (this.props.native.params.slave === '1' || this.props.native.params.slave === 1)) {\r\n            return true;\r\n        } else\r\n        if (input.name === 'doNotUseWriteMultipleRegisters' && this.props.native.params.onlyUseWriteMultipleRegisters) {\r\n            return true;\r\n        } else\r\n        if (input.name === 'onlyUseWriteMultipleRegisters' && this.props.native.params.doNotUseWriteMultipleRegisters) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    inputDisplay = input => {\r\n        if (['tcp', 'tcprtu'].includes(this.props.native.params.type)) {\r\n            if (['comName', 'baudRate', 'dataBits', 'stopBits', 'parity'].includes(input.name)) {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (['bind', 'port'].includes(input.name)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getInputsBlock(inputs, title) {\r\n        return <><Paper className={this.props.classes.optionsContainer}>\r\n            <Typography variant=\"h4\" gutterBottom className={this.props.classes.header}>{I18n.t(title)}</Typography>\r\n            {inputs.map(input => {\r\n                if (!this.inputDisplay(input)) {\r\n                    return null;\r\n                } else if (input.name === 'bind' && this.props.native.params.type !== 'serial' && (this.props.native.params.slave === '1' || this.props.native.params.slave === 1)) {\r\n                    return <Box className={this.props.classes.optionContainer} key={input.name}>\r\n                        {this.state.ips ?\r\n                            <FormControl>\r\n                                <InputLabel>{I18n.t('Slave IP address')}</InputLabel>\r\n                                <Select\r\n                                    className={this.props.classes.optionsSelect}\r\n                                    disabled={this.inputDisabled(input)}\r\n                                    value={this.props.native.params[input.name] || ''}\r\n                                    onChange={e => this.changeParam(input.name, e.target.value)}\r\n                                >\r\n                                    {this.state.ips.map(option =>\r\n                                        <MenuItem key={option.value} value={option.value}>{option.title}</MenuItem>\r\n                                    )}\r\n                                </Select>\r\n                            </FormControl>\r\n                            :\r\n                            <TextField\r\n                                type={input.type}\r\n                                label={I18n.t('Slave IP address')}\r\n                                className={this.props.classes.optionsTextfield}\r\n                                disabled={this.inputDisabled(input)}\r\n                                helperText={input.help ? I18n.t(input.help) : ''}\r\n                                value={this.props.native.params[input.name]}\r\n                                InputProps={{endAdornment: input.dimension ? <InputAdornment position=\"end\">{I18n.t(input.dimension)}</InputAdornment> : null}}\r\n                                onChange={e => this.changeParam(input.name, e.target.value)}\r\n                            />}\r\n                    </Box>;\r\n                }\r\n                if (input.type === 'checkbox') {\r\n                    return <FormControl className={this.props.classes.optionContainer} key={input.name}>\r\n                        <FormControlLabel\r\n                            label={I18n.t(input.title)}\r\n                            control={<Checkbox\r\n                                label={I18n.t(input.title)}\r\n                                className={this.props.classes.optionsCheckbox}\r\n                                disabled={this.inputDisabled(input)}\r\n                                checked={this.props.native.params[input.name]}\r\n                                onChange={e => this.changeParam(input.name, e.target.checked)}\r\n                            />}\r\n                        />\r\n                        {input.help ? <FormHelperText className={this.props.classes.helperText}>{I18n.t(input.help)}</FormHelperText> : null}\r\n                        {input.dimension ? I18n.t(input.dimension) : null}\r\n                    </FormControl>;\r\n                } else if (input.type === 'select') {\r\n                    return <Box className={this.props.classes.optionContainer} key={input.name}>\r\n                        <FormControl>\r\n                            <InputLabel>{I18n.t(input.title)}</InputLabel>\r\n                            <Select\r\n                                className={this.props.classes.optionsSelect}\r\n                                disabled={this.inputDisabled(input)}\r\n                                value={this.props.native.params[input.name] || ''}\r\n                                onChange={e => this.changeParam(input.name, e.target.value)}\r\n                            >\r\n                                {input.options.map(option =>\r\n                                    <MenuItem key={option.value} value={option.value}>{option.title}</MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl> {input.dimension ? I18n.t(input.dimension) : null}\r\n                    </Box>;\r\n                }  else if (input.type === 'ports') {\r\n                    return <Box className={this.props.classes.optionContainer} key={input.name}>\r\n                        {this.state.ports && !this.state.customPort ?\r\n                            <FormControl>\r\n                                <InputLabel>{I18n.t(input.title)}</InputLabel>\r\n                                <Select\r\n                                    className={this.props.classes.optionsSelect}\r\n                                    disabled={this.inputDisabled(input)}\r\n                                    value={this.props.native.params[input.name] || ''}\r\n                                    onChange={e => this.changeParam(input.name, e.target.value)}\r\n                                >\r\n                                    {this.state.ports.map(option =>\r\n                                        <MenuItem key={option.value} value={option.value}>{option.title}</MenuItem>\r\n                                    )}\r\n                                </Select>\r\n                            </FormControl>\r\n                            :\r\n                            <TextField\r\n                                type={input.type}\r\n                                label={I18n.t(input.title)}\r\n                                className={this.props.classes.optionsTextfield}\r\n                                disabled={this.inputDisabled(input)}\r\n                                helperText={input.help ? I18n.t(input.help) : ''}\r\n                                value={this.props.native.params[input.name]}\r\n                                InputProps={{endAdornment: input.dimension ? <InputAdornment position=\"end\">{I18n.t(input.dimension)}</InputAdornment> : null}}\r\n                                onChange={e => this.changeParam(input.name, e.target.value)}\r\n                            />}\r\n                            {this.state.ports ? <IconButton onClick={() => this.setState({customPort: !this.state.customPort})}><EditIcon/></IconButton> : null}\r\n                    </Box>;\r\n                } else {\r\n                    return <Box className={this.props.classes.optionContainer} key={input.name}>\r\n                        <TextField\r\n                            type={input.type}\r\n                            label={I18n.t(input.title)}\r\n                            className={this.props.classes.optionsTextfield}\r\n                            disabled={this.inputDisabled(input)}\r\n                            helperText={input.help ? I18n.t(input.help) : ''}\r\n                            value={this.props.native.params[input.name]}\r\n                            InputProps={{endAdornment: input.dimension ? <InputAdornment position=\"end\">{I18n.t(input.dimension)}</InputAdornment> : null}}\r\n                            onChange={e => this.changeParam(input.name, e.target.value)}\r\n                        />\r\n                    </Box>;\r\n                }\r\n            })\r\n            }\r\n        </Paper></>\r\n    }\r\n\r\n    render() {\r\n        return <form className={ this.props.classes.tab }>\r\n            <Grid container spacing={2} >\r\n                <Grid item xs={12} md={6} className={ this.props.classes.optionsGrid }>{this.getInputsBlock(connectionInputs, 'Connection parameters')}</Grid>\r\n                <Grid item xs={12} md={6} className={ this.props.classes.optionsGrid }>{this.getInputsBlock(generalInputs, 'General')}</Grid>\r\n            </Grid>\r\n        </form>;\r\n    }\r\n\r\n    changeParam = (name, value) => {\r\n        let native = JSON.parse(JSON.stringify(this.props.native));\r\n        native.params[name] = value;\r\n        if (name === 'slave') {\r\n            if (value === '1' || value === 1) {\r\n                native.params.multiDeviceId = false;\r\n                if (this.props.native.params.type !== 'serial') {\r\n                    this.readIPs();\r\n                }\r\n            }\r\n        } else\r\n        if (name === 'type') {\r\n            if (value !== 'tcp' && (native.params.slave === 1 || native.params.slave === '1')) {\r\n                native.params.slave = '0';\r\n            }\r\n\r\n            if (value === 'serial') {\r\n                this.readPorts();\r\n            }\r\n            if (value === 'serial' && (this.props.native.params.slave === '1' || this.props.native.params.slave === 1)) {\r\n                this.readIPs();\r\n            }\r\n        } else\r\n        if (name === 'showAliases') {\r\n            native.disInputs.forEach(item => (value ? item._address += 10000 : item._address -= 10000))\r\n            native.inputRegs.forEach(item => (value ? item._address += 30000 : item._address -= 30000))\r\n            native.holdingRegs.forEach(item => (value ? item._address += 40000 : item._address -= 40000))\r\n            if (!value) {\r\n                native.params.directAddresses = false;\r\n            }\r\n        }\r\n        this.props.changeNative(native);\r\n    }\r\n}\r\n\r\nOptions.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n    rooms: PropTypes.object,\r\n};\r\n\r\nexport default withStyles(styles)(Options);\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nimport { tsv2json, json2tsv } from 'tsv-json';\r\nimport { useSnackbar } from 'notistack';\r\nimport AceEditor from 'react-ace';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nconst styles = theme => ({\r\n    tsvEditor: {\r\n        width: '100%',\r\n        height: 400\r\n    },\r\n    tsvEditorTextarea: {\r\n        fontFamily: 'monospace'\r\n    }\r\n});\r\n\r\nconst TsvDialog = (props) => {\r\n    const [tsv, setTsv] = useState('');\r\n    useEffect(() => {\r\n        let tsvResult = [];\r\n        tsvResult.push(props.fields.map(field => field.name));\r\n        props.data.forEach(item =>\r\n            tsvResult.push(props.fields.map(field => item[field.name] !== undefined ? item[field.name].toString() : ''))\r\n        );\r\n        setTsv(json2tsv(tsvResult));\r\n    }, [props.open]); // eslint-disable-line react-hooks/exhaustive-deps\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    if (!props.open) {\r\n        return null;\r\n    }\r\n\r\n    const saveTsv = () => {\r\n        let data = tsv2json(tsv);\r\n        let fields = data.shift();\r\n        let success = true;\r\n        let errors = [];\r\n        for (let index in props.fields) {\r\n            if (props.fields[index].name !== fields[index]) {\r\n                errors.push(<>No field <i>{props.fields[index].name}</i> in position <i>{parseInt(index) + 1}</i>!</>);\r\n                success = false;\r\n            }\r\n        }\r\n\r\n        data = data.map((itemValues, itemIndex) => {\r\n            let item = {};\r\n            for (let index in props.fields) {\r\n                if (props.fields[index].type === 'select' && !props.fields[index].options.map(option => option.value).includes(itemValues[index])) {\r\n                    errors.push(<>Value <i>{itemValues[index]}</i> is wrong for field <i>{props.fields[index].name}</i> in position <i>{parseInt(itemIndex) + 1}</i>!</>);\r\n                    success = false;\r\n                }\r\n                if (props.fields[index].type === 'checkbox') {\r\n                    itemValues[index] = itemValues[index] === 'true' ? true : false;\r\n                }\r\n                item[props.fields[index].name] = itemValues[index];\r\n            }\r\n            return item;\r\n        });\r\n\r\n        if (!success) {\r\n            enqueueSnackbar(<div>{errors.map((error, index) => <div key={index}>{error}</div>)}</div>, { variant: 'error' });\r\n            return;\r\n        }\r\n        props.save(data);\r\n        props.onClose();\r\n    };\r\n\r\n    return <Dialog\r\n        open={props.open}\r\n        onClose={props.onClose}\r\n        maxWidth=\"lg\"\r\n        fullWidth\r\n    >\r\n        <DialogTitle>{I18n.t('Edit data as TSV')}</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>{I18n.t('You can copy, paste and edit data as TSV.')}</DialogContentText>\r\n            <div>\r\n                <AceEditor\r\n                    onChange={e => setTsv(e)}\r\n                    height=\"400px\"\r\n                    showPrintMargin={false}\r\n                    value={tsv}\r\n                    className={props.classes.tsvEditor}\r\n                    width=\"100%\"\r\n                    setOptions={{firstLineNumber: 0}}\r\n                    mode={null}\r\n                />\r\n            </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={e => {\r\n                Utils.copyToClipboard(tsv, e);\r\n                enqueueSnackbar(I18n.t('TSV was copied to clipboard'));\r\n            }} startIcon={<FileCopyIcon />}>{I18n.t('Copy to clipboard')}</Button>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={saveTsv} startIcon={<SaveIcon />}>{I18n.t('Import')}</Button>\r\n            <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Close')}</Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n}\r\n\r\nTsvDialog.propTypes = {\r\n    open: PropTypes.bool,\r\n    onClose: PropTypes.func,\r\n    classes: PropTypes.object,\r\n    save: PropTypes.func,\r\n    fields: PropTypes.array,\r\n    data: PropTypes.array\r\n}\r\n\r\nexport default withStyles(styles)(TsvDialog);","import PropTypes from 'prop-types';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nconst DeleteAllDialog = (props) => {\r\n    return props.open ? <Dialog open={props.open} onClose={props.onClose}>\r\n        <DialogTitle>{I18n.t('Delete all items')}</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>{I18n.t('Are you sure to delete all items?')}</DialogContentText>\r\n            <DialogActions>\r\n                <Button variant=\"contained\" color=\"secondary\" startIcon={<DeleteIcon />} onClick={() => {\r\n                    props.action();\r\n                    props.onClose();\r\n                }}>{I18n.t('Delete all items')}</Button>\r\n                <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Cancel')}</Button>\r\n            </DialogActions>\r\n        </DialogContent>\r\n    </Dialog> : null;\r\n}\r\n\r\nDeleteAllDialog.propTypes = {\r\n    open: PropTypes.bool,\r\n    action: PropTypes.func,\r\n    onClose: PropTypes.func,\r\n    classes: PropTypes.object,\r\n}\r\n\r\nexport default DeleteAllDialog;","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nconst DeleteDialog = (props) => {\r\n    const [disableWarnings, setDisableWarnings] = useState(false);\r\n    useEffect(() => {\r\n        setDisableWarnings(false);\r\n    }, [props.open]);\r\n\r\n    return props.open ? <Dialog open={props.open} onClose={props.onClose}>\r\n        <DialogTitle>{I18n.t('Delete item')}</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>{I18n.t('Are you sure to delete item with address \"%s\"?', props.item._address)}</DialogContentText>\r\n            <DialogContentText><FormControlLabel\r\n                label={I18n.t('Don\\'t show this message in 5 minutes')}\r\n                control={<Checkbox\r\n                    checked={disableWarnings}\r\n                    onChange={e => setDisableWarnings(e.target.checked)}\r\n            />}/></DialogContentText>\r\n            <DialogActions>\r\n                <Button variant=\"contained\" color=\"secondary\" startIcon={<DeleteIcon />} onClick={() => {\r\n                    props.action(disableWarnings);\r\n                    props.onClose();\r\n                }}>{I18n.t('Delete')}</Button>\r\n                <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Cancel')}</Button>\r\n            </DialogActions>\r\n        </DialogContent>\r\n    </Dialog> : null;\r\n}\r\n\r\nDeleteDialog.propTypes = {\r\n    open: PropTypes.bool,\r\n    onClose: PropTypes.func,\r\n    classes: PropTypes.object,\r\n    action: PropTypes.func,\r\n    item: PropTypes.object,\r\n}\r\n\r\nexport default DeleteDialog;","import { useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ImportExport from '@material-ui/icons/ImportExport';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nimport ExpertIcon from '@iobroker/adapter-react/icons/IconExpert';\r\nimport TextWithIcon from '@iobroker/adapter-react/Components/TextWithIcon';\r\nimport SelectWithIcon from '@iobroker/adapter-react/Components/SelectWithIcon';\r\n\r\nimport TsvDialog from './TsvDialog';\r\nimport DeleteAllDialog from './DeleteAllDialog';\r\nimport DeleteDialog from './DeleteDialog';\r\n\r\nconst styles = theme => ({\r\n    tableHeader: {\r\n        whiteSpace: 'nowrap',\r\n        fontWeight: 'bold',\r\n        fontSize: '80%',\r\n        padding: '0px 8px'\r\n    },\r\n    tableHeaderExtended: {\r\n        color: theme.palette.type === 'dark' ? theme.palette.primary.light : theme.palette.primary.dark\r\n    },\r\n    tableCell: {\r\n        whiteSpace: 'nowrap',\r\n        fontSize: '80%',\r\n        padding: '0px 8px'\r\n    },\r\n    tableContainer: {\r\n        overflow: 'auto',\r\n        maxHeight: 'calc(100vh - 180px)'\r\n    },\r\n    tableTextField: {\r\n        fontSize: '80%'\r\n    },\r\n    tableSelect: {\r\n        fontSize: '80%'\r\n    },\r\n    tableTextFieldContainer: {\r\n        width: '100%'\r\n    },\r\n    tableSelectContainer: {\r\n        width: '100%'\r\n    },\r\n    nonEditMode: {\r\n        cusrsor: 'pointer'\r\n    }\r\n});\r\n\r\nconst DataCell = props => {\r\n    const sortedItem = props.sortedItem;\r\n    const field = props.field;\r\n    const editMode = props.editMode;\r\n    const setEditMode = props.setEditMode;\r\n\r\n    const ref = useRef();\r\n    // useEffect(() => {\r\n    //     if (props.editMode) {\r\n    //         // ref.current && ref.current.focus()\r\n    //         //window.setTimeout(() => ref.current && ref.current.focus(), 1000);\r\n    //     }\r\n    // }, [props.editMode])\r\n\r\n    let item = sortedItem.item;\r\n    let result;\r\n    if (field.type === 'checkbox') {\r\n        if (!editMode) {\r\n            result = <Checkbox\r\n                checked={!!item[field.name]}\r\n                disabled\r\n            />;\r\n        } else {\r\n            result = <Tooltip title={I18n.t(field.title)}>\r\n                <Checkbox\r\n                    inputRef={ref}\r\n                    className={props.classes.tableCheckbox}\r\n                    checked={!!item[field.name]}\r\n                    disabled={props.getDisable(sortedItem.$index, field.name)}\r\n                    onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.checked)}\r\n                />\r\n            </Tooltip>;\r\n        }\r\n    } else if (field.type === 'rooms') {\r\n        if (!editMode) {\r\n            result = <TextWithIcon list={props.rooms} value={item[field.name]}/>;\r\n        } else {\r\n            result = <SelectWithIcon\r\n                list={props.rooms}\r\n                allowNone={true}\r\n                value={item[field.name] === undefined || item[field.name] === null ? '' : item[field.name]}\r\n                dense={true}\r\n                inputProps={{ref, className: props.classes.tableSelect}}\r\n                disabled={props.getDisable(sortedItem.$index, field.name)}\r\n                onChange={value => props.changeParam(sortedItem.$index, field.name, value)}\r\n                className={props.classes.tableSelectContainer}\r\n            />;\r\n        }\r\n    } else if (field.type === 'select') {\r\n        if (!editMode) {\r\n            let option = field.options.find(option => option.value === item[field.name]);\r\n            result = option ? option.title : '';\r\n        } else {\r\n            result = <Select\r\n                value={item[field.name] === undefined || item[field.name] === null ? '' : item[field.name]}\r\n                inputProps={{ref, className: props.classes.tableSelect}}\r\n                disabled={props.getDisable(sortedItem.$index, field.name)}\r\n                onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.value)}\r\n                className={props.classes.tableSelectContainer}\r\n            >\r\n                {field.options.map(option =>\r\n                    <MenuItem key={option.value} value={option.value}>{option.title ? option.title : <i>{I18n.t('Nothing')}</i>}</MenuItem>\r\n                )}\r\n            </Select>;\r\n        }\r\n    } else {\r\n        if (!editMode) {\r\n            result = item[field.name] ? item[field.name] : null;\r\n        } else {\r\n            result = <TextField\r\n                value={item[field.name] === undefined || item[field.name] === null ? '' : item[field.name]}\r\n                className={props.classes.tableTextFieldContainer}\r\n                inputProps={{ref: ref, className: props.classes.tableTextField}}\r\n                type={field.type}\r\n                onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.value)}\r\n                disabled={props.getDisable(sortedItem.$index, field.name)}\r\n            />;\r\n        }\r\n    }\r\n\r\n    return <TableCell\r\n        className={Utils.clsx(props.classes.tableCell, !editMode && props.classes.nonEditMode)}\r\n        onClick={e => {\r\n            setEditMode(true);\r\n            window.localStorage.setItem('Modbus.editMode', 'true');\r\n            window.setTimeout(() => ref.current && ref.current.focus(), 100);\r\n        }}\r\n    >\r\n        {result}\r\n    </TableCell>;\r\n}\r\n\r\nconst RegisterTable = props => {\r\n    const [tsvDialogOpen, setTsvDialogOpen] = useState(false);\r\n    const [editMode, setEditMode] = useState(window.localStorage.getItem('Modbus.editMode') !== 'false');\r\n    const [extendedMode, setExtendedMode] = useState(window.localStorage.getItem('Modbus.extendedMode') === 'true');\r\n    const [deleteAllDialog, setDeleteAllDialog] = useState({\r\n        open: false,\r\n        action: null,\r\n    });\r\n    const [deleteDialog, setDeleteDialog] = useState({\r\n        open: false,\r\n        item: null,\r\n        action: null,\r\n    });\r\n\r\n    let sortedData = props.getSortedData(props.data, props.orderBy, props.order);\r\n\r\n    return <div>\r\n        <div>\r\n            <Tooltip title={I18n.t('Add line')}>\r\n                <IconButton onClick={e => props.addItem()}>\r\n                    <AddIcon/>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title={I18n.t('Edit as TSV (Tab separated values)')}>\r\n                <IconButton onClick={() => setTsvDialogOpen(true)}>\r\n                    <ImportExport/>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <FormControlLabel\r\n                control={<Switch checked={editMode} onChange={e => {\r\n                    setEditMode(e.target.checked);\r\n                    window.localStorage.setItem('Modbus.editMode', e.target.checked);\r\n                }}/>}\r\n                label={I18n.t('Edit mode')}\r\n            />\r\n            {props.showExtendedModeSwitch && <Tooltip title={I18n.t('Toggle extended mode')}>\r\n                <IconButton\r\n                    color={extendedMode ? 'primary' : 'inherit'}\r\n                    onClick={() => {\r\n                        window.localStorage.setItem('Modbus.extendedMode', extendedMode ? 'false' : 'true');\r\n                        setExtendedMode(!extendedMode);\r\n                    }}>\r\n                    <ExpertIcon/>\r\n                </IconButton>\r\n            </Tooltip>}\r\n        </div>\r\n        <div className={props.classes.tableContainer}>\r\n            <Table size=\"small\"\r\n                   stickyHeader\r\n                   padding=\"none\"\r\n            >\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {props.fields.filter(item => (extendedMode || !item.expert) && (!props.formulaDisabled || !item.formulaDisabled)).map(field => {\r\n                            let isChecked = false;\r\n                            let indeterminate = false;\r\n                            let trueFound = false;\r\n                            let falseFound = false;\r\n                            for (let k in props.data) {\r\n                                if (props.data[k][field.name]) {\r\n                                    isChecked = true;\r\n                                    trueFound = true;\r\n                                } else {\r\n                                    isChecked = false;\r\n                                    falseFound = true;\r\n                                }\r\n\r\n                                if (trueFound && falseFound) {\r\n                                    indeterminate = true;\r\n                                    isChecked = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            return <TableCell\r\n                                key={field.name}\r\n                                style={{width: field.type === 'checkbox' ? 20 : field.width}}\r\n                                className={Utils.clsx(props.classes.tableHeader, field.expert && props.classes.tableHeaderExtended)}\r\n                                title={field.tooltip ? I18n.t(field.tooltip) : null}\r\n                            >\r\n                                {field.type === 'checkbox' ?\r\n                                    <Tooltip title={I18n.t('Change all')}>\r\n                                        <Checkbox\r\n                                            indeterminate={indeterminate}\r\n                                            checked={isChecked}\r\n                                            onChange={e => {\r\n                                                let newData = JSON.parse(JSON.stringify(props.data));\r\n                                                newData.forEach(item =>\r\n                                                    item[field.name] = e.target.checked);\r\n                                                props.changeData(newData);\r\n                                            }}\r\n                                        />\r\n                                    </Tooltip>\r\n                                    : null}\r\n                                {field.sorted ? <TableSortLabel\r\n                                    active={field.name === props.orderBy}\r\n                                    direction={props.order}\r\n                                    onClick={e => {\r\n                                        const isAsc = props.orderBy === field.name && props.order === 'asc';\r\n                                        props.onChangeOrder(field.name, isAsc ? 'desc' : 'asc');\r\n                                    }}\r\n                                >{I18n.t(field.title)}</TableSortLabel> : I18n.t(field.title)}\r\n                            </TableCell>\r\n                        })}\r\n                        <TableCell>\r\n                            <Tooltip title={I18n.t('Delete all')}>\r\n                                <div>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={e => setDeleteAllDialog({\r\n                                            open: true,\r\n                                            action: () => props.changeData([]),\r\n                                        })}\r\n                                        disabled={!props.data.length}\r\n                                    >\r\n                                        <DeleteIcon/>\r\n                                    </IconButton>\r\n                                </div>\r\n                            </Tooltip>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        sortedData.map(sortedItem =>\r\n                            <TableRow hover key={sortedItem.$index}>\r\n                                {props.fields.filter(item => (extendedMode || !item.expert) && (!props.formulaDisabled || !item.formulaDisabled)).map(field =>\r\n                                    <DataCell\r\n                                        sortedItem={sortedItem}\r\n                                        field={field}\r\n                                        editMode={editMode}\r\n                                        rooms={props.rooms}\r\n                                        setEditMode={setEditMode}\r\n                                        key={field.name}\r\n                                        {...props}\r\n                                    />\r\n                                )}\r\n                                <TableCell>\r\n                                    <Tooltip title={I18n.t('Delete')}>\r\n                                        <div>\r\n                                            <IconButton size=\"small\" onClick={e => {\r\n                                                let lastTime = window.sessionStorage.getItem('disableDeleteDialogs');\r\n                                                if (lastTime && (new Date() - new Date(lastTime)) < 1000 * 60 * 5) {\r\n                                                    props.deleteItem(sortedItem.$index);\r\n                                                    return;\r\n                                                }\r\n                                                setDeleteDialog({\r\n                                                    open: true,\r\n                                                    action: disableDialogs => {\r\n                                                        if (disableDialogs) {\r\n                                                            window.sessionStorage.setItem('disableDeleteDialogs', (new Date()).toISOString());\r\n                                                        }\r\n                                                        props.deleteItem(sortedItem.$index);\r\n                                                    },\r\n                                                    item: sortedItem.item\r\n                                                })\r\n                                            }}>\r\n                                                <DeleteIcon/>\r\n                                            </IconButton>\r\n                                        </div>\r\n                                    </Tooltip>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </div>\r\n        <TsvDialog\r\n            open={tsvDialogOpen}\r\n            save={props.changeData}\r\n            onClose={() => setTsvDialogOpen(false)}\r\n            data={props.data}\r\n            fields={props.fields}\r\n        />\r\n        <DeleteAllDialog\r\n            open={deleteAllDialog.open}\r\n            action={deleteAllDialog.action}\r\n            onClose={() => setDeleteAllDialog({\r\n                open: false,\r\n                action: null,\r\n            })}\r\n        />\r\n        <DeleteDialog\r\n            open={deleteDialog.open}\r\n            action={deleteDialog.action}\r\n            onClose={() => setDeleteDialog({\r\n                open: false,\r\n                action: null,\r\n                item: null\r\n            })}\r\n            item={deleteDialog.item}\r\n        />\r\n    </div>;\r\n}\r\n\r\nRegisterTable.propTypes = {\r\n    data: PropTypes.array,\r\n    fields: PropTypes.array,\r\n    classes: PropTypes.object,\r\n    addItem: PropTypes.func,\r\n    changeData: PropTypes.func,\r\n    deleteItem: PropTypes.func,\r\n    rooms: PropTypes.object,\r\n    formulaDisabled: PropTypes.bool,\r\n    onChangeOrder: PropTypes.func,\r\n    getSortedData: PropTypes.func,\r\n    showExtendedModeSwitch: PropTypes.bool,\r\n}\r\n\r\nexport default withStyles(styles)(RegisterTable);","import {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport RegisterTable from '../Components/RegisterTable';\r\n\r\nclass BaseRegisters extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.nativeField = '';\r\n        this.state = {\r\n            order: window.localStorage.getItem('Modbus.order') || 'asc',\r\n            orderBy: window.localStorage.getItem('Modbus.orderBy') || '_address',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!window.localStorage.getItem('Modbus.orderBy')) {\r\n            this.fields = this.fields || this.getFields();\r\n            const isSlaveIDPresent = !!this.fields.find(item => item.name === 'deviceId');\r\n            const orderBy = isSlaveIDPresent ? 'deviceId' : '_address';\r\n\r\n            if (orderBy !== this.state.orderBy) {\r\n                this.setState({orderBy});\r\n            }\r\n        }\r\n    }\r\n\r\n    isShowExtendedModeSwitch() {\r\n        return true;\r\n    }\r\n\r\n    getFields() {\r\n        return null;\r\n    }\r\n\r\n    changeParam = (index, name, value) => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n        data[index][name] = value;\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n\r\n    addItem = () => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n        let newItem = {};\r\n        this.getFields().forEach(field => newItem[field.name] = '');\r\n        data.push(newItem);\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n\r\n    deleteItem = index => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n        data.splice(index, 1);\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n\r\n    changeData = data => {\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n\r\n    getDisable = (index, name) => {\r\n        return false;\r\n    }\r\n\r\n    getSortedData = (data, orderBy, order) => {\r\n        data = data || this.props.native[this.nativeField];\r\n        orderBy = orderBy || this.state.orderBy;\r\n        order = order || this.state.order;\r\n        let sortedData = [];\r\n        data.forEach((item, index) => {sortedData[index] = {item, $index: index}});\r\n        const field = this.fields.find(item => item.name === orderBy);\r\n\r\n        sortedData.sort((sortedItem1, sortedItem2) => {\r\n            let sort1;\r\n            let sort2;\r\n            if (orderBy === 'deviceId') {\r\n                sort1 = (parseInt(sortedItem1.item.deviceId, 10) << 16) | parseInt(sortedItem1.item._address, 10);\r\n                sort2 = (parseInt(sortedItem2.item.deviceId, 10) << 16) | parseInt(sortedItem2.item._address, 10);\r\n            } else if (orderBy === '$index') {\r\n                sort1 = sortedItem1[orderBy];\r\n                sort2 = sortedItem2[orderBy];\r\n            } else if (field && field.type === 'number') {\r\n                sort1 = parseInt(sortedItem1.item[orderBy], 10);\r\n                sort2 = parseInt(sortedItem2.item[orderBy], 10);\r\n            } else {\r\n                sort1 = sortedItem1.item[orderBy];\r\n                sort2 = sortedItem2.item[orderBy];\r\n            }\r\n            return (order === 'asc' ? sort1 > sort2 : sort1 < sort2) ? 1 : -1;\r\n        });\r\n\r\n        return sortedData;\r\n    }\r\n\r\n    render() {\r\n        this.fields = this.fields || this.getFields();\r\n\r\n        return <Paper>\r\n            <RegisterTable\r\n                fields={this.fields}\r\n                data={this.props.native[this.nativeField]}\r\n                getSortedData={this.getSortedData}\r\n                showExtendedModeSwitch={this.isShowExtendedModeSwitch()}\r\n                changeParam={this.changeParam}\r\n                addItem={this.addItem}\r\n                deleteItem={this.deleteItem}\r\n                changeData={this.changeData}\r\n                getDisable={this.getDisable}\r\n                formulaDisabled={this.props.formulaDisabled}\r\n                rooms={this.props.rooms}\r\n                order={this.state.order}\r\n                orderBy={this.state.orderBy}\r\n                onChangeOrder={(orderBy, order) => {\r\n                    this.setState({orderBy, order});\r\n                    window.localStorage.setItem('Modbus.orderBy', orderBy);\r\n                    window.localStorage.setItem('Modbus.order', order);\r\n                }}\r\n            />\r\n        </Paper>\r\n    }\r\n}\r\n\r\nBaseRegisters.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n    rooms: PropTypes.object,\r\n    formulaDisabled: PropTypes.bool,\r\n};\r\n\r\nexport default BaseRegisters;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport types from '../data/types';\r\nimport roles from '../data/roles';\r\n\r\nimport BaseRegisters from './BaseRegisters';\r\n\r\nclass InputRegisters extends BaseRegisters {\r\n    nativeField = 'inputRegs';\r\n\r\n    getFields() {\r\n        let result = [\r\n            {name: '_address', title: 'Address', type: 'number', sorted: true, width: 20},\r\n            {name: 'name', title: 'Name', type: 'text', sorted: true},\r\n            {name: 'description', title: 'Description', type: 'text', sorted: true},\r\n            {name: 'unit', title: 'Unit', type: 'text', width: 30},\r\n            {name: 'type', title: 'Type', type: 'select', options: types, sorted: true},\r\n            {name: 'len', title: 'Length', type: 'text', width: 20},\r\n            {name: 'factor', title: 'Factor', type: 'text', width: 20, expert: true},\r\n            {name: 'offset', title: 'Offset', type: 'text', width: 20, expert: true},\r\n            {name: 'formula', title: 'Formula', type: 'text', formulaDisabled: true, expert: true},\r\n            {name: 'role', title: 'Role', type: 'select', options: roles, sorted: true},\r\n            {name: 'room', title: 'Room', type: 'rooms'},\r\n            {name: 'cw', title: 'CW', type: 'checkbox', tooltip: 'Cyclic write'},\r\n            {name: 'isScale', title: 'SF', type: 'checkbox', tooltip: 'Store this value as scaling factor', expert: true, formulaDisabled: true},\r\n        ];\r\n\r\n        if (this.props.native.params.multiDeviceId) {\r\n            result.splice(1, 0,\r\n                {name: 'deviceId', title: 'Slave ID', type: 'number', sorted: true, width: 20},\r\n            );\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    addItem = () => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n        let newItem = {}\r\n        this.getFields().forEach(field => newItem[field.name] = '')\r\n        if (data.length) {\r\n            let sortedData = this.getSortedData();\r\n            let lastItem = sortedData[sortedData.length - 1].item;\r\n            newItem._address = parseInt(lastItem._address, 10) + (lastItem.len ? parseInt(lastItem.len, 10) : 1);\r\n            newItem.deviceId = lastItem.deviceId;\r\n            newItem.type = lastItem.type;\r\n            newItem.len = lastItem.len;\r\n            newItem.factor = lastItem.factor;\r\n            newItem.offset = lastItem.offset;\r\n            newItem.formula = lastItem.formula;\r\n            newItem.role = lastItem.role;\r\n            newItem.cw = lastItem.cw;\r\n            newItem.isScale = lastItem.isScale;\r\n        } else {\r\n            newItem.role = 'level';\r\n            newItem.factor = 1;\r\n            newItem.offset = 0;\r\n            newItem._address = this.props.native.params.showAliases ? 30001 : 0;\r\n        }\r\n        data.push(newItem);\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n\r\n    getDisable = (index, name) => {\r\n        if (name === 'len') {\r\n            if (!['string', 'stringle'].includes(this.props.native[this.nativeField][index].type)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    changeParam = (index, name, value) => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n        data[index][name] = value;\r\n        if (name === 'type') {\r\n            if (['', 'uint16be', 'uint16le', 'int16be', 'int16le', 'uint8be', 'uint8le', 'int8be', 'int8le'].includes(value)) {\r\n                data[index].len = 1;\r\n            }\r\n            if (['uint32be', 'uint32le', 'uint32sw', 'uint32sb', 'int32be', 'int32le', 'int32sw', 'int32sb', 'floatbe', 'floatle', 'floatsw', 'floatsb', 'string', 'stringle'].includes(value)) {\r\n                data[index].len = 2;\r\n            }\r\n            if (['uint64be', 'uint64le', 'doublebe', 'doublele'].includes(value)) {\r\n                data[index].len = 4;\r\n            }\r\n        }\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n}\r\n\r\nInputRegisters.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n    rooms: PropTypes.object,\r\n};\r\n\r\nexport default InputRegisters;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport BaseRegisters from './BaseRegisters';\r\n\r\nimport roles from '../data/roles';\r\nimport types from '../data/types';\r\n\r\nclass HoldingRegisters extends BaseRegisters {\r\n    nativeField = 'holdingRegs';\r\n\r\n    getFields() {\r\n        //let rooms = this.getRooms();\r\n        //rooms.unshift({value: '', title: ''});\r\n\r\n        let result = [\r\n            {name: '_address', title: 'Address', type: 'number', sorted: true, width: 20},\r\n            {name: 'name', title: 'Name', type: 'text', sorted: true},\r\n            {name: 'description', title: 'Description', type: 'text', sorted: true},\r\n            {name: 'unit', title: 'Unit', type: 'text', width: 30},\r\n            {name: 'type', title: 'Type', type: 'select', options: types, sorted: true},\r\n            {name: 'len', title: 'Length', type: 'text', width: 20},\r\n            {name: 'factor', title: 'Factor', type: 'text', width: 20, expert: true},\r\n            {name: 'offset', title: 'Offset', type: 'text', width: 20, expert: true},\r\n            {name: 'formula', title: 'Formula', type: 'text', expert: true, formulaDisabled: true},\r\n            {name: 'role', title: 'Role', type: 'select', options: roles, sorted: true},\r\n            {name: 'room', title: 'Room', type: 'rooms'},\r\n            {name: 'poll', title: 'Poll', type: 'checkbox', tooltip: 'Enable polling of data point'},\r\n            {name: 'wp', title: 'WP', type: 'checkbox', tooltip: 'Write pulses (true → false edge)', expert: true},\r\n            {name: 'cw', title: 'CW', type: 'checkbox', tooltip: 'Cyclic write'},\r\n            {name: 'isScale', title: 'SF', type: 'checkbox', tooltip: 'Store this value as scaling factor', expert: true, formulaDisabled: true},\r\n        ];\r\n\r\n        if (this.props.native.params.multiDeviceId) {\r\n            result.splice(1, 0,\r\n                {name: 'deviceId', title: 'Slave ID', type: 'number', sorted: true, width: 20},\r\n            );\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    addItem = () => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n        let newItem = {}\r\n        this.getFields().forEach(field => newItem[field.name] = '');\r\n        if (data.length) {\r\n            let sortedData = this.getSortedData();\r\n            let lastItem = sortedData[sortedData.length - 1].item;\r\n            newItem._address = parseInt(lastItem._address, 10) + (lastItem.len ? parseInt(lastItem.len, 10) : 1);\r\n            newItem.deviceId = lastItem.deviceId;\r\n            newItem.type = lastItem.type;\r\n            newItem.len = (lastItem.len ? parseInt(lastItem.len) : 1);\r\n            newItem.factor = lastItem.factor;\r\n            newItem.offset = lastItem.offset;\r\n            newItem.formula = lastItem.formula;\r\n            newItem.role = lastItem.role;\r\n            newItem.poll = lastItem.poll;\r\n            newItem.wp = lastItem.wp;\r\n            newItem.cw = lastItem.cw;\r\n            newItem.isScale = lastItem.isScale;\r\n        } else {\r\n            newItem.role = 'level';\r\n            newItem.factor = 1;\r\n            newItem.offset = 0;\r\n            newItem._address = this.props.native.params.showAliases ? 40001 : 0;\r\n        }\r\n        data.push(newItem);\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n\r\n    getDisable = (index, name) => {\r\n        return name === 'len' &&\r\n            !['string', 'stringle'].includes(this.props.native[this.nativeField][index].type);\r\n    }\r\n\r\n    changeParam = (index, name, value) => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n\r\n        data[index][name] = value;\r\n\r\n        if (name === 'type') {\r\n            if (['', 'uint16be', 'uint16le', 'int16be', 'int16le', 'uint8be', 'uint8le', 'int8be', 'int8le'].includes(value)) {\r\n                data[index].len = 1;\r\n            } else\r\n            if (['uint32be', 'uint32le', 'uint32sw', 'uint32sb', 'int32be', 'int32le', 'int32sw', 'int32sb', 'floatbe', 'floatle', 'floatsw', 'floatsb', 'string', 'stringle'].includes(value)) {\r\n                data[index].len = 2;\r\n            } else\r\n            if (['uint64be', 'uint64le', 'doublebe', 'doublele'].includes(value)) {\r\n                data[index].len = 4;\r\n            }\r\n        }\r\n\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n}\r\n\r\nHoldingRegisters.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n    rooms: PropTypes.object,\r\n};\r\n\r\nexport default HoldingRegisters;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport roles from '../data/roles';\r\n\r\nimport BaseRegisters from './BaseRegisters';\r\n\r\nclass DiscreteInputs extends BaseRegisters {\r\n    nativeField = 'disInputs';\r\n\r\n    getFields() {\r\n        let result = [\r\n            {name: '_address', title: 'Address', type: 'number', sorted: true, width: 20},\r\n            {name: 'name', title: 'Name', type: 'text', sorted: true},\r\n            {name: 'description', title: 'Description', type: 'text', sorted: true},\r\n            {name: 'formula', title: 'Formula', type: 'text', expert: true, formulaDisabled: true},\r\n            {name: 'role', title: 'Role', type: 'select', options: roles, sorted: true},\r\n            {name: 'room', title: 'Room', type: 'rooms'},\r\n            {name: 'cw', title: 'CW', type: 'checkbox', tooltip: 'Cyclic write'},\r\n            {name: 'isScale', title: 'SF', type: 'checkbox', tooltip: 'Store this value as scaling factor', expert: true, formulaDisabled: true},\r\n        ];\r\n\r\n        if (this.props.native.params.multiDeviceId) {\r\n            result.splice(1, 0,\r\n                {name: 'deviceId', title: 'Slave ID', type: 'number', sorted: true, width: 20},\r\n            );\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    isShowExtendedModeSwitch() {\r\n        return this.props.native.params.slave !== 1 && this.props.native.params.slave !== '1';\r\n    }\r\n\r\n    addItem = () => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n        let newItem = {}\r\n        this.getFields().forEach(field => newItem[field.name] = '')\r\n        if (data.length) {\r\n            let sortedData = this.getSortedData();\r\n            let lastItem = sortedData[sortedData.length - 1].item;\r\n            newItem._address = parseInt(lastItem._address, 10) + 1;\r\n            newItem.deviceId = lastItem.deviceId;\r\n            newItem.formula = lastItem.formula;\r\n            newItem.role = lastItem.role;\r\n            newItem.cw = lastItem.cw;\r\n            newItem.isScale = lastItem.isScale;\r\n        } else {\r\n            newItem.role = 'level';\r\n            newItem._address = this.props.native.params.showAliases ? 10001 : 0;\r\n        }\r\n        data.push(newItem);\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n}\r\n\r\nDiscreteInputs.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n    rooms: PropTypes.object,\r\n};\r\n\r\nexport default DiscreteInputs;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport roles from '../data/roles';\r\n\r\nimport BaseRegisters from './BaseRegisters';\r\n\r\nclass Coils extends BaseRegisters {\r\n    nativeField = 'coils';\r\n\r\n    getFields() {\r\n        let result = [\r\n            {name: '_address', title: 'Address', type: 'number', sorted: true, width: 20},\r\n            {name: 'name', title: 'Name', type: 'text', sorted: true},\r\n            {name: 'description', title: 'Description', type: 'text', sorted: true},\r\n            {name: 'formula', title: 'Formula', type: 'text', expert: true, formulaDisabled: true},\r\n            {name: 'role', title: 'Role', type: 'select', options: roles, sorted: true},\r\n            {name: 'room', title: 'Room', type: 'rooms'},\r\n            {name: 'poll', title: 'Poll', type: 'checkbox'},\r\n            {name: 'wp', title: 'WP', type: 'checkbox', expert: true},\r\n            {name: 'cw', title: 'CW', type: 'checkbox'},\r\n            {name: 'isScale', title: 'SF', type: 'checkbox', tooltip: 'Store this value as scaling factor', expert: true, formulaDisabled: true},\r\n        ];\r\n\r\n        if (this.props.native.params.multiDeviceId) {\r\n            result.splice(1, 0,\r\n                {name: 'deviceId', title: 'Slave ID', type: 'number', sorted: true, width: 20},\r\n            );\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    addItem = () => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n        let newItem = {}\r\n        this.getFields().forEach(field => newItem[field.name] = '');\r\n        if (data.length) {\r\n            let sortedData = this.getSortedData();\r\n            let lastItem = sortedData[sortedData.length - 1].item;\r\n            newItem._address = parseInt(lastItem._address, 10) + 1;\r\n            newItem.deviceId = lastItem.deviceId;\r\n            newItem.formula = lastItem.formula;\r\n            newItem.role = lastItem.role;\r\n            newItem.poll = lastItem.poll;\r\n            newItem.wp = lastItem.wp;\r\n            newItem.cw = lastItem.cw;\r\n            newItem.isScale = lastItem.isScale;\r\n        } else {\r\n            newItem.role = 'level';\r\n            newItem._address = this.props.native.params.showAliases ? 1 : 0;\r\n        }\r\n        data.push(newItem);\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n}\r\n\r\nCoils.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n    rooms: PropTypes.object,\r\n};\r\n\r\nexport default Coils;\r\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nimport {AiOutlineFieldBinary as BinaryIcon} from 'react-icons/all';\r\nimport {TiSortNumerically as DigitsIcon} from 'react-icons/all';\r\n\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader'\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport TabOptions from './Tabs/Options';\r\nimport TabInputRegisters from './Tabs/InputRegisters';\r\nimport TabHoldingRegisters from './Tabs/HoldingRegisters';\r\nimport TabDiscreteInputs from './Tabs/DiscreteInputs';\r\nimport TabCoils from './Tabs/Coils';\r\n\r\nconst styles = theme => ({\r\n    root: {},\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto',\r\n    },\r\n    tabContentIFrame: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px - 38px)',\r\n        overflow: 'auto'\r\n    },\r\n    tab: {\r\n        width: '100%',\r\n        minHeight: '100%'\r\n    }\r\n});\r\n\r\nconst tabs = [\r\n    {\r\n        name: 'general',\r\n        title: 'General',\r\n        component: TabOptions,\r\n    },\r\n    {\r\n        name: 'discrete-inputs',\r\n        title: 'Discrete inputs',\r\n        component: TabDiscreteInputs,\r\n        icon: <BinaryIcon style={{width: 18, height: 18, marginRight: 4, display: 'inline-block'}}/>,\r\n        tooltip: 'Binary inputs (read-only)'\r\n    },\r\n    {\r\n        name: 'coils',\r\n        title: 'Coils',\r\n        component: TabCoils,\r\n        icon: <BinaryIcon style={{width: 18, height: 18, marginRight: 4, display: 'inline-block'}}/>,\r\n        tooltip: 'Binary inputs and outputs'\r\n    },\r\n    {\r\n        name: 'input-registers',\r\n        title: 'Input Registers',\r\n        component: TabInputRegisters,\r\n        icon: <DigitsIcon style={{width: 18, height: 18, marginRight: 4, display: 'inline-block'}}/>,\r\n        tooltip: 'Input registers (8-64 bit values, read-only)'\r\n    },\r\n    {\r\n        name: 'holding-registers',\r\n        title: 'Holding Registers',\r\n        component: TabHoldingRegisters,\r\n        icon: <DigitsIcon style={{width: 18, height: 18, marginRight: 4, display: 'inline-block'}}/>,\r\n        tooltip: 'Input/output registers (8-64 bit values)'\r\n    },\r\n]\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        // TODO: delete it after adapter-react 1.0.27 (BF: 2021.06.09)\r\n        if (window.io && window.location.port === '3000') {\r\n            console.log('Reaload!');\r\n            delete window.io;\r\n            window.io = new window.SocketClient();\r\n        }\r\n        const extendedProps = {...props};\r\n        extendedProps.encryptedFields = ['pass'];\r\n\r\n        extendedProps.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        super(props, extendedProps);\r\n        this.state.moreLoaded = false;\r\n        this.state.rooms = null;\r\n    }\r\n\r\n    onConnectionReady() {\r\n        super.onConnectionReady();\r\n        this.socket.getEnums('rooms')\r\n            .then(rooms =>\r\n                this.setState({moreLoaded: true, rooms}));\r\n    }\r\n\r\n    getSelectedTab() {\r\n        const selectedTab = this.state.selectedTab;\r\n        if (!selectedTab) {\r\n            return 0;\r\n        } else {\r\n            return tabs.findIndex(tab => tab.name === selectedTab);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.loaded || !this.state.moreLoaded) {\r\n            return <MuiThemeProvider theme={this.state.theme}>\r\n                <Loader theme={this.state.themeType} />\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        return <MuiThemeProvider theme={this.state.theme}>\r\n            <SnackbarProvider>\r\n                <div className=\"App\" style={{background: this.state.theme.palette.background.default, color: this.state.theme.palette.text.primary}}>\r\n                    <AppBar position=\"static\">\r\n                        <Tabs\r\n                            value={this.getSelectedTab()}\r\n                            onChange={(e, index) => this.selectTab(tabs[index].name, index)}\r\n                            variant=\"scrollable\" scrollButtons=\"auto\">\r\n                            {tabs.map(tab => {\r\n                                return <Tab\r\n                                    label={tab.icon ? <>{tab.icon}{I18n.t(tab.title)}</> : I18n.t(tab.title)}\r\n                                    data-name={tab.name}\r\n                                    key={tab.name}\r\n                                    title={tab.tooltip ? I18n.t(tab.tooltip) : undefined}\r\n                                />\r\n                            })}\r\n                        </Tabs>\r\n                    </AppBar>\r\n                    <div className={this.isIFrame ? this.props.classes.tabContentIFrame : this.props.classes.tabContent}>\r\n                        {tabs.map((tab, index) => {\r\n                            const TabComponent = tab.component;\r\n                            if (this.state.selectedTab) {\r\n                                if (this.state.selectedTab !== tab.name) {\r\n                                    return null;\r\n                                }\r\n                            } else {\r\n                                if (index !== 0) {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                            return <TabComponent\r\n                                key={tab.name}\r\n                                formulaDisabled={this.state.native.params.slave === '1' || this.state.native.params.slave === 1}\r\n                                common={this.common}\r\n                                socket={this.socket}\r\n                                native={this.state.native}\r\n                                onError={text => this.setState({errorText: (text || text === 0) && typeof text !== 'string' ? text.toString() : text})}\r\n                                onLoad={native => this.onLoadConfig(native)}\r\n                                instance={this.instance}\r\n                                adapterName={this.adapterName}\r\n                                changed={this.state.changed}\r\n                                onChange={(attr, value, cb) => this.updateNativeValue(attr, value, cb)}\r\n                                changeNative={(value) => this.setState({native: value, changed: this.getIsChanged(value)})}\r\n                                rooms={this.state.rooms}\r\n                            />\r\n                        })}\r\n                    </div>\r\n                    {this.renderError()}\r\n                    {this.renderSaveCloseButtons()}\r\n                </div>\r\n            </SnackbarProvider>\r\n        </MuiThemeProvider>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider} from '@material-ui/core/styles';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {version} from '../package.json';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 'modbus';\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log(`iobroker.${window.adapterName}@${version} using theme \"${themeName}\"`);\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <App\r\n                onThemeChange={_theme => {\r\n                    themeName = _theme;\r\n                    build();\r\n                }}\r\n            />\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nif (false && window.location.host !== 'localhost:3000') {\r\n    Sentry.init({\r\n        dsn: 'https://5ad729dbed504d15aa8bde423cae9a8e@sentry.iobroker.net/57',\r\n        release: `iobroker.${window.adapterName}@${version}`,\r\n        integrations: [\r\n            new SentryIntegrations.Dedupe()\r\n        ]\r\n    });\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}